<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nacos on 逆天改命</title><link>https://linkall.pub/tags/nacos/</link><description>Recent content in nacos on 逆天改命</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 16 Jul 2020 19:44:53 +0000</lastBuildDate><atom:link href="https://linkall.pub/tags/nacos/index.xml" rel="self" type="application/rss+xml"/><item><title>nacos 配置中心的使用</title><link>https://linkall.pub/blog/nacos-config-usage/</link><pubDate>Thu, 16 Jul 2020 19:44:53 +0000</pubDate><guid>https://linkall.pub/blog/nacos-config-usage/</guid><description>pom配置 在根pom.xml中设置
&amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; 在项目中增加依赖：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-config&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 设置配置 Nacos Config 使用 DataId 和 GROUP 确定一个配置。 Data ID: nacos-config.properties Group : DEFAULT_GROUP 配置格式: Properties 配置内容： user.name=nacos-config-properties user.age=90 DataId 默认取 application-name，Group默认：default_group，类型后缀默认：*.properties 使用 增加bootstrap.propertie，配置文件来配置 Nacos Server 地址
spring.application.name=base-provider spring.cloud.nacos.config.server-addr=peer1:8848,peer2:8848,peer3:8848 logging.level.com.alibaba.nacos.client.naming=error logging.level.com.alibaba.nacos.config.log.level=error logging.level.com.alibaba.nacos.naming.log.level=error # 可以使用 spring.cloud.nacos.config.file-extension=yaml 这里我们使用 @Value 注解来将对应的配置注入到 HeartController 的 userName 和 age 字段，并添加 @RefreshScope 打开动态刷新功能
使用方法一： @RequestMapping(&amp;#34;/heart&amp;#34;) @RefreshScope @RestController public class HeartController { @Value(&amp;#34;${server.</description></item></channel></rss>