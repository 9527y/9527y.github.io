<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>redis :: Tag :: 逆天改命</title><link>https://linkall.pub/tags/redis/index.html</link><description/><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 10 Aug 2020 11:26:00 +0000</lastBuildDate><atom:link href="https://linkall.pub/tags/redis/index.xml" rel="self" type="application/rss+xml"/><item><title>redis主从设置</title><link>https://linkall.pub/redis-master-slave-replicate/index.html</link><pubDate>Mon, 10 Aug 2020 11:26:00 +0000</pubDate><guid>https://linkall.pub/redis-master-slave-replicate/index.html</guid><description>预备知识： redis安装 配置 ##Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程 daemonize no ##当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定 pidfile /var/run/redis.pid ##指定Redis监听端口，默认端口为6379 port 6379 # TCP接收队列长度，受/proc/sys/net/core/somaxconn和tcp_max_syn_backlog这两个内核参数的影响 tcp-backlog 511 ##绑定的主机地址 bind 127.0.0.1 ##当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 timeout 300 # 如果非零，则设置SO_KEEPALIVE选项来向空闲连接的客户端发送ACK,用来定时向client发送tcp_ack包来探测client是否存活的 tcp-keepalive 60 ##指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose ## debug （大量信息，对开发/测试有用） ## verbose （很多精简的有用信息，但是不像debug等级那么多） ## notice （适量的信息，基本上是你生产环境中需要的） ## warning （只有很重要/严重的信息会记录下来） loglevel verbose ##日志名 logfile "./redis7003.log" ##设置数据库的数量，可以使用SELECT &lt;dbid>命令在连接上指定数据库id databases 16 ##持久化rdb文件，指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合save &lt;seconds> &lt;changes> #Redis默认配置文件中提供了三个条件： save 900 1 save 300 10 save 60 10000 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。 # 默认如果开启RDB快照(至少一条save指令)并且最新的后台保存失败，Redis将会停止接受写操作 # 这将使用户知道数据没有正确的持久化到硬盘，否则可能没人注意到并且造成一些灾难 stop-writes-on-bgsave-error yes ##指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大 rdbcompression yes ###指定本地数据库文件名，默认值为dump.</description></item><item><title>redis哨兵机制</title><link>https://linkall.pub/redis-sentinel-setting/index.html</link><pubDate>Fri, 31 Jul 2020 17:14:56 +0000</pubDate><guid>https://linkall.pub/redis-sentinel-setting/index.html</guid><description>背景 我司使用仅有两台redis实例，所以不太适合做redis群集，比较适合使用redis哨兵机制。
原理 监控master故障时，使用投票机制（sdown，odown），判定是否故障，移除；选举新的slave作为master节点。redis.conf会随之变化。
哨兵机制关键配置 # 哨兵sentinel监控的redis主节点的 ip port # sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum> sentinel monitor mymaster 172.16.8.206 6379 1 # Default is 3 minutes. 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒。 sentinel down-after-milliseconds mymaster 3000启动 ./redis-sentinel sentinel.conf注意 启动顺序：master->slave->sentinel master如果down掉，再启动不会他的角色是slave</description></item><item><title>redis 5.x安装</title><link>https://linkall.pub/redis-5-install/index.html</link><pubDate>Fri, 31 Jul 2020 14:57:13 +0000</pubDate><guid>https://linkall.pub/redis-5-install/index.html</guid><description>下载地址：
https://redis.io/download安装环境：
yum install -y gcc编译安装
make distclean &amp;&amp; make修改配置
vi redis.conf运行
src/redis-server redis.</description></item></channel></rss>