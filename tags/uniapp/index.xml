<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>uniapp :: Tag :: 逆天改命</title><link>https://linkall.pub/tags/uniapp/index.html</link><description/><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 18 Sep 2020 16:42:12 +0000</lastBuildDate><atom:link href="https://linkall.pub/tags/uniapp/index.xml" rel="self" type="application/rss+xml"/><item><title>Uni app 页面&amp;组件生命周期</title><link>https://linkall.pub/blog/uniapp-life-cycle/index.html</link><pubDate>Fri, 18 Sep 2020 16:42:12 +0000</pubDate><guid>https://linkall.pub/blog/uniapp-life-cycle/index.html</guid><description>页面的生命周期 onLoad 监听页面加载，其参数为上个页面传递的数据，参数类型为object（用于页面传参），参考示例 onShow 监听页面显示 onReady 监听页面初次渲染完成 onHide 监听页面隐藏 onUnload 监听页面卸载 onPullDownRefresh 监听用户下拉动作 onReachBottom 页面上拉触底事件的处理函数 onShareAppMessage 用户点击右上角分享 微信小程序 onPageScroll 监听页面滚动 onTabItemTap 当前是 tab 页时，点击 tab 时触发。 组件的生命周期 beforeCreate：组件初始化，但数据原生观测、自定义观测(event\watcher)没生成之前。 未完全创建阶段 created：组件创建后，但还未挂载 完全创建阶段 beforeMount：组件渲染后，挂载前。 渲染后待挂载 mounted： 组件挂载到页面 可用 vm.$el 访问 挂载OK beforeUpdate： 虚拟 DOM 重新渲染和打补丁之前 再次渲染前 updated ： 组件 DOM 已经更新 再次渲染后 activated： keep-alive 组件激活时调用。 当前组件被激活：显示 deactivated： keep-alive 组件停用时调用。 当前组件隐藏 beforeDestroy： 实例销毁之前调用。实例仍然完全可用。 销毁前 destroy： Vue 实例销毁后调用 补充： 挂载阶段，先渲染组件，然后挂载组件。</description></item><item><title>uni-app上canvas绘制图片助手，一个json就制作分享朋友圈海报</title><link>https://linkall.pub/blog/uniapp-canvas-helper/index.html</link><pubDate>Sat, 13 Jun 2020 18:52:21 +0000</pubDate><guid>https://linkall.pub/blog/uniapp-canvas-helper/index.html</guid><description>[TOC]
uniapp-canvas-drawer uniapp-canvas-drawer是基于 kuckboy1994 的 mp_canvas_drawer 移植的 uni-app 版本。之后同步更新。
下载地址 uniapp-canvas-drawer。
当前环境下，大家都非常需要分享到朋友圈这个功能，但是实现起来各有心酸（坑比较多），所以才有了如下的 canvas 绘图工具。
具有如下特性： 简单易用 一个 json 搞定绘制图片 功能全满足 90% 的使用场景 1、绘制文本（换行、超出内容省略号、中划线、下划线、文本加粗） 2、绘制图片 3、绘制矩形 4、保存图片 5、多图绘制 6、代码量小
体验 git clone https://github.com/quanweiwang/uniapp-canvas-drawer想在手机上使用配置自己的 appid 即可。
使用 1、clone 到本地
git clone https://github.com/quanweiwang/uniapp-canvas-drawer2、把 components 中的 uniapp-canvas-drawer 拷贝到自己项目下。
3、在 pages.json 使用页面注册组件
{ "path": "pages/index/index", "style": { "navigationBarTitleText": "uni-app", "usingComponents": { "canvasdrawer": "/components/uniapp-canvas-drawer/uniapp-canvas-drawer" } } }4、在页面 **.vue 文件中加入如下代码
&lt;canvasdrawer painting="{{painting}}" bind:getImage="eventGetImage"/>painting 是需要传入的 json。 getImage 方法是绘图完成之后的回调函数，在 event.</description></item><item><title>uniapp 使用 i18n 实现多语言切换</title><link>https://linkall.pub/blog/uniapp-multi-lang/index.html</link><pubDate>Fri, 12 Jun 2020 15:47:21 +0000</pubDate><guid>https://linkall.pub/blog/uniapp-multi-lang/index.html</guid><description>[TOC]
主题思想 使用vue-i18n实现国际化。官方文档
npm 安装 npm install vue-i18n --save在 main.js 中引入
import Vue from 'vue'; import App from './App'; import VueI18n from 'vue-i18n' // ★ import messages from './commom/lang.js' // ★ Vue.use(VueI18n) // ★ Vue.config.productionTip = false; const i18n = new VueI18n({ // ★ locale: 'zh-CN', // 默认选择的语言 messages }) App.mpType = 'app'; Vue.prototype._i18n = i18n // ★ const app = new Vue({ i18n,	// ★ ...App }); app.$mount();其中改变locale的取值可以改变语言的类型，messages的内容我放到一个独立的lang.js文件，便于维护，其中的内容如下：
export default { 'en-US': { lang: 'en', loading: 'loading.</description></item></channel></rss>