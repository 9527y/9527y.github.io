<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx :: Tag :: 逆天改命</title><link>https://linkall.pub/tags/nginx/index.html</link><description/><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 07 Jan 2022 17:03:17 +0000</lastBuildDate><atom:link href="https://linkall.pub/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx转发websocket协议</title><link>https://linkall.pub/nginx-sw-forward/index.html</link><pubDate>Fri, 07 Jan 2022 17:03:17 +0000</pubDate><guid>https://linkall.pub/nginx-sw-forward/index.html</guid><description>Nginx转发 Nginx添加WebSocket的转发配置。
location /websocket/ { proxy_pass http://myserver; proxy_http_version 1.1; proxy_read_timeout 360s; proxy_redirect off; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; #配置连接为升级连接 proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; }使用如上连接，如果所有的连接仅仅为 “ws” 协议的请求是没有问题的，但是如果要及支持 http 请求又支持 ws 请求上述配置就不起作用了。
既支持http又支持 ws 的配置。 http { #自定义变量 $connection_upgrade map $http_upgrade $connection_upgrade { default keep-alive; #默认为keep-alive 可以支持 一般http请求 'websocket' upgrade; #如果为websocket 则为 upgrade 可升级的。 } server { ... location /chat/ { proxy_pass http://backend; proxy_http_version 1.</description></item><item><title>nginx 80端口重定向到443端口</title><link>https://linkall.pub/nginx-ssl/index.html</link><pubDate>Sun, 07 Feb 2021 15:58:32 +0000</pubDate><guid>https://linkall.pub/nginx-ssl/index.html</guid><description>使用如下配置即可
server { listen 80; server_name www.test.com; rewrite ^(.*)$ https://${server_name}$1 permanent; }</description></item><item><title>vue-router的history模式nginx配置</title><link>https://linkall.pub/vue-router-history-nginx-config/index.html</link><pubDate>Wed, 06 Jan 2021 17:15:12 +0000</pubDate><guid>https://linkall.pub/vue-router-history-nginx-config/index.html</guid><description>原理是：将解析转为index.html页面
server { listen 80; server_name avue-data.meipinshu.cn; location / { index index.html; root /data/wwwroot; try_files $uri $uri/ /index.html; } }</description></item><item><title>Nginx 静态文件服务配置及优化</title><link>https://linkall.pub/nginx-static-config/index.html</link><pubDate>Thu, 11 Jun 2020 10:22:54 +0000</pubDate><guid>https://linkall.pub/nginx-static-config/index.html</guid><description>[TOC]
根目录和索引文件 root 指令指定将用于搜索文件的根目录。 为了获取所请求文件的路径，NGINX 将请求 URI 附加到 root 指令指定的路径。该指令可以放在 http {}，server {} 或 location {} 上下文中的任何级别。在下面的示例中，为虚拟服务器定义了 root 指令。 它适用于未包含根指令的所有location {} 块，以显式重新定义根：
server { root /www/data; location / { } location /images/ { } location ~ \.(mp3|mp4) { root /www/media; } }在这里，NGINX 针对 /images/ 开头的 URI 将在文件系统的 /www/ data/images/ 目录中搜索相应文件。 如果 URI 以 .mp3 或 .mp4 扩展名结尾，则 NGINX 会在 /www/media/ 目录中搜索该文件，因为它是在匹配的位置块中定义的。
如果请求以 / 结尾，则 NGINX 将其视为对目录的请求，并尝试在目录中查找索引文件。index 指令定义索引文件的名称（默认值为 index.html）。要继续该示例，如果请求 URI 是 /images/some/path/，则 NGINX 会返回文件 /www/data/images/some/path/index.</description></item><item><title>nginx 80端口重定向到443端口</title><link>https://linkall.pub/nginx-redirect-80-to-443/index.html</link><pubDate>Sun, 31 May 2020 18:34:29 +0000</pubDate><guid>https://linkall.pub/nginx-redirect-80-to-443/index.html</guid><description>使用如下配置即可
server { listen 80; server_name www.test.com; rewrite ^(.*)$ https://${server_name}$1 permanent; }</description></item><item><title>nginx上传文件413错误</title><link>https://linkall.pub/nginx-413-configuration/index.html</link><pubDate>Thu, 28 May 2020 01:02:50 +0000</pubDate><guid>https://linkall.pub/nginx-413-configuration/index.html</guid><description>nginx报错： 413 Request Entity Too Large 是因为请求体积太大，解决办法：更改Nginx的配置，将客户端上传最大文件体积增大，如下配置，根据自身情况设定。
client_max_body_size 20M;以上配置可放入server、http、location指令中。
全局配置 http{ client_max_body_size 20m; }站点配置 修改站点下location的配置
server { listen 80; server_name 75051685.xyz; location / { root html; index index.html index.htm; } }修改为：
server { listen 80; server_name 75051685.xyz; location / { root html; index index.html index.htm; client_max_body_size 20m; } }</description></item></channel></rss>