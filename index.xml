<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>逆天改命</title><link>https://linkall.pub/</link><description>Recent content on 逆天改命</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 20 May 2024 09:56:30 +0100</lastBuildDate><atom:link href="https://linkall.pub/index.xml" rel="self" type="application/rss+xml"/><item><title>《我的阿勒泰》书籍原著在线阅读下载</title><link>https://linkall.pub/post/my-altay/</link><pubDate>Mon, 20 May 2024 09:56:30 +0100</pubDate><guid>https://linkall.pub/post/my-altay/</guid><description>《我的阿勒泰》书籍原著在线阅读下载 该剧改编自作家李娟同名散文集。生长在阿勒泰的汉族少女李文秀（周依然 饰）一心在大城市中追求文学梦想，却屡屡碰壁被迫回到老家与开小卖部的母亲张凤侠（马伊琍 饰）相依为命。在结识哈萨克少年巴太（于适 饰）之后，文秀渐渐发现了当地之美。
可能看原著会带来不同的感受吧：
我用夸克网盘分享了「11、我的阿勒泰.pdf」 链接：https://pan.quark.cn/s/869a1ca8c326</description></item><item><title>获取最新的GoogleDriver，下载指定版本</title><link>https://linkall.pub/blog/get-the-newest-chromedriver/</link><pubDate>Sat, 18 May 2024 09:19:40 +0000</pubDate><guid>https://linkall.pub/blog/get-the-newest-chromedriver/</guid><description>对于114之前的版本参考： https://developer.chrome.com/docs/chromedriver/downloads
对于114之后的版本访问：
下载最新版本 获取地址：https://googlechromelabs.github.io/chrome-for-testing
下载制定版本 可能chrome的版本不是最新的，所以需要指定版本。在最新版本中得到地址：https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.60/mac-arm64/chromedriver-mac-arm64.zip
在url中有一段是版本号，根据你的chrome版本，替换那个版本号，比如我用的是124.0.6367.203。所以得到的下载地址是：
https://storage.googleapis.com/chrome-for-testing-public/125.0.6422.60/mac-arm64/chromedriver-mac-arm64.zip</description></item><item><title>尼日利亚手机号匹配运营商规则</title><link>https://linkall.pub/blog/nigeria-tel-operator-rule/</link><pubDate>Tue, 14 May 2024 09:32:00 +0000</pubDate><guid>https://linkall.pub/blog/nigeria-tel-operator-rule/</guid><description>在尼日利亚，不同的移动运营商分配了特定的手机号段，通过这些号码段可以区分是哪家运营商提供的服务。以下是尼日利亚主要移动运营商及其对应的手机号段规则：
主要运营商及其号码段 MTN Nigeria
0703 0706 0803 0806 0810 0813 0814 0816 0903 0906 0913 0916 Globacom (Glo)
0705 0805 0807 0811 0815 0905 Airtel Nigeria
0701 0708 0802 0808 0812 0901 0902 0904 0907 0912 9mobile (原Etisalat Nigeria)
0809 0817 0818 0909 0908 如何使用这些号码段规则 通过识别手机号的前三位或四位数字，你可以确定该号码归属的运营商。例如：
0803 123 4567：号码段为0803，属于MTN Nigeria。 0815 987 6543：号码段为0815，属于Globacom (Glo)。 0701 234 5678：号码段为0701，属于Airtel Nigeria。 0809 876 5432：号码段为0809，属于9mobile。 例外情况 需要注意的是，随着号码携带服务（number portability）的引入，用户可以在不更改电话号码的情况下更换运营商。因此，仅通过号码段来判断运营商可能不完全准确，但仍然是一个非常有用的初步识别工具。</description></item><item><title>Nginx 配置反向代理去除前缀</title><link>https://linkall.pub/blog/nginx-remove-prefix/</link><pubDate>Sat, 30 Mar 2024 17:07:54 +0000</pubDate><guid>https://linkall.pub/blog/nginx-remove-prefix/</guid><description>使用Nginx做反向代理的时候如果需要根据不同的url代理到不同的服务器，需要通过以下 法：
地址后面加/ server { location ^~/v1/ { proxy_pass http://localhost:8080/; } } ^~/v1/表示请求前缀是v1的请求，proxy_pass最后加上/，就会把v1去除，比如请求的地址是v1/api/test，则代理发出的请求是http://localhost:8080/api/test
使用rewrite server { location ^~/v1/ { rewrite ^/v1/(.*)$ /$1 break; proxy_pass http://localhost:8080; } } 使用 rewrite重写了url，注意 proxy_pass后不需要加/</description></item><item><title>docker修改存储位置</title><link>https://linkall.pub/blog/docker-modify-storage/</link><pubDate>Mon, 05 Jun 2023 12:52:58 +0000</pubDate><guid>https://linkall.pub/blog/docker-modify-storage/</guid><description>[toc]
背景 因为随着容器启动越来越多，存储占据越来越多的空间：/var/lib/docker/overlay2/，所以修改挂载位置，可以是外部空间等。
修改存储位置 停止服务 systemctl stop docker 将存储路径复制到新目录下 &amp;lt;新目录&amp;gt; mkdir -p &amp;lt;新目录&amp;gt; sudo rsync -aqxP /var/lib/docker/ &amp;lt;新目录&amp;gt; 修改启动脚本/lib/systemd/system/docker.service。 # 将 [Service] Type=notify # the default is not to use systemd for cgroups because the delegate issues still # exists and systemd currently does not support the cgroup feature set required # for containers run by docker ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock # 修改为 ExecStart=/usr/bin/dockerd -g &amp;lt;新目录&amp;gt; -H fd:// --containerd=/run/containerd/containerd.sock 重启服务 systemctl daemon-reload; systemctl start docker; 之前的目录可以清理了。</description></item><item><title>镜像版本说明</title><link>https://linkall.pub/blog/docker-image-version-intro/</link><pubDate>Wed, 16 Mar 2022 00:43:22 +0000</pubDate><guid>https://linkall.pub/blog/docker-image-version-intro/</guid><description>不同的tag表示给予不同的base image。
debian linux 版本代号
Debian 11（&amp;#34;bullseye&amp;#34;） — 下一代发布时间尚未确定 Debian 10（&amp;#34;buster&amp;#34;）- 当前的稳定版（stable） Debian 9（&amp;#34;stretch&amp;#34;）- 旧的稳定版（oldoldstable） Debian 8（&amp;#34;jessie&amp;#34;） — 更旧的稳定版（oldoldstable） Debian 7（&amp;#34;wheezy&amp;#34;） — 被淘汰的稳定版 Debian 6.0（&amp;#34;squeeze&amp;#34;） — 被淘汰的稳定版 Debian GNU/Linux 5.0（&amp;#34;lenny&amp;#34;） — 被淘汰的稳定版 Debian GNU/Linux 4.0（&amp;#34;etch&amp;#34;） — 被淘汰的稳定版 Debian GNU/Linux 3.1（&amp;#34;sarge&amp;#34;） — 被淘汰的稳定版 Debian GNU/Linux 3.0（&amp;#34;woody&amp;#34;） — 被淘汰的稳定版 Debian GNU/Linux 2.2（&amp;#34;potato&amp;#34;） — 被淘汰的稳定版 Debian GNU/Linux 2.1（&amp;#34;slink&amp;#34;） — 被淘汰的稳定版 Debian GNU/Linux 2.0（&amp;#34;hamm&amp;#34;） — 被淘汰的稳定版 alpine：本意是高山的，是一个面向安全的轻型 Linux 发行版。和Debian一样都是Linux的一种发行版本。此版本系统特点是小巧、安全、简单、适合容器使用。 buster：Debian版本，类似的还有Jessie（2015年发行的）、wheezy （2013年发行） slim：镜像的瘦身版。大概意思是通过动态和静态的分析，去除不必要的依赖，缩减镜像的大小 ​前面说过，不同的tag是基于不同的base image构建的镜像。上面的alpine是基于该种Linux构建的，buster、stretch、jessie是基于相应的debian Linux版本构建的。slim是特殊的瘦身版。</description></item><item><title>架构师能力模型</title><link>https://linkall.pub/blog/architect-competency-model/</link><pubDate>Tue, 15 Mar 2022 11:22:36 +0000</pubDate><guid>https://linkall.pub/blog/architect-competency-model/</guid><description>架构师在很多人眼中是一个非常高大上的职业, 就像武侠小说中的绝世高手一样, 关键时刻可以起到扭转乾坤的作用, 是团队中的灵魂人物. 回想我自己做一线架构师的过程中, 也没有经历过比较系统的培训, 都是摸着石头过河. 近期在培养架构师的过程中, 促使我一直在思考, 一个合格的架构师到底应该具备哪些能力? 对希望成长为架构师的同学, 或者在承担架构师职责的同学, 需要提供哪些方面的指导和帮助, 才能让他逐步成长为合格的架构师呢? 下面我结合自己的经验, 总结了我认为对架构师来说非常重要的十项能力, 希望给那些努力成长为架构师的同学提供一点点帮助.
研发流程的持续改进 架构师不是单兵作战, 凭借个人英雄主义是无法做成大事的. 架构师一定是指挥一个团队来共同完成既定目标, 或者一个复杂项目. 在软件研发领域, 决定团队研发效率的核心在于研发流程的优化. 现阶段互联网公司大多采用敏捷研发流程, 这其中主要包括:
需求卡片的状态流转. 尽可能依靠工具实现状态的自动化流转, 减少人为操作的情况. 开发工具的选择. 比如web ide, 代码审查工具, 项目管理工具等. 代码的开发和审查(包括单测代码和测试流水线代码). 开发功能代码的同时, 必须同时提交单测代码和测试流水线代码, 保证新增代码的基本功能被覆盖. 尽量不要分开开发, 保证测试代码的质量. 测试流水线的建设和持续优化. 测试流水线需要在测试覆盖率和运行时间方面进行平衡, 测试覆盖率越大势必会增加测试时间, 如果每次提交pr, 都需要跑很长时间的测试流水线, 那么无疑会降低研发效率. 这时候可以采用测试case分级的方法, 设计ci pileline, daily pipeline, perf pipeline等多条测试流水线, 并且以不同的周期运行. 持续发布和持续部署. 敏捷开发模式核心就是希望通过小步快跑的方式优化传统瀑布模型的阶段性开发模式, 让每次迭代尽可能快速的得到效果反馈, 从而可以针对反馈更快速的进行软件迭代. 这就要求我们一定要有持续发布和部署的能力, 可以采用灰度发布, A/B test等模式. 架构师需要对研发流程的每个环节保持着敏锐的嗅觉, 可以及时发现其中的问题, 并提出有效的优化方法. 我们经常讨论架构师要不要写代码的问题, 在我看来, 不管架构师是否动手写代码, 一定要对代码保持敏感. 保持敏感的方法就是对研发流程保持足够的把控, 参与代码审查, 持续的优化研发流程.</description></item><item><title>Nginx转发websocket协议</title><link>https://linkall.pub/blog/nginx-sw-forward/</link><pubDate>Fri, 07 Jan 2022 17:03:17 +0000</pubDate><guid>https://linkall.pub/blog/nginx-sw-forward/</guid><description>Nginx转发 Nginx添加WebSocket的转发配置。
location /websocket/ { proxy_pass http://myserver; proxy_http_version 1.1; proxy_read_timeout 360s; proxy_redirect off; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;upgrade&amp;#34;; #配置连接为升级连接 proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } 使用如上连接，如果所有的连接仅仅为 &amp;ldquo;ws&amp;rdquo; 协议的请求是没有问题的，但是如果要及支持 http 请求又支持 ws 请求上述配置就不起作用了。
既支持http又支持 ws 的配置。 http { #自定义变量 $connection_upgrade map $http_upgrade $connection_upgrade { default keep-alive; #默认为keep-alive 可以支持 一般http请求 &amp;#39;websocket&amp;#39; upgrade; #如果为websocket 则为 upgrade 可升级的。 } server { ... location /chat/ { proxy_pass http://backend; proxy_http_version 1.</description></item><item><title>jar：解压jar包更改文件后再重新打包</title><link>https://linkall.pub/blog/modify-jar-file/</link><pubDate>Thu, 06 Jan 2022 22:52:17 +0000</pubDate><guid>https://linkall.pub/blog/modify-jar-file/</guid><description>1、阻止jar打包时重新生成清单列表， -M 不生成配置清单，这样还可以使用maven生成的配置清单也就是MANIFEST.MF
jar -cfM xxx.jar * 2、jar打包时不进行压缩 -0
jar -cfM0 xxx * 3、不用解压后替换文件再压缩，如下命令更新更简单：
jar uf xxx.jar BOOT-INF/classes/application-dev.yml 4、解压命令：
jar -xf xxx.jar jar命令参数： jar命令格式：jar {c t x u f }[ v m e 0 M i ][-C 目录]文件名&amp;hellip; 其中{ctxu}这四个参数必须选选其一。[v f m e 0 M i ]是可选参数，文件名也是必须的。
-c　创建新的 JAR 文件包 -t　列出 JAR 文件包的内容列表 -x　展开 JAR 文件包的指定文件或者所有文件 -u　更新已存在的 JAR 文件包 (添加文件到 JAR 文件包中) [vfm0M] 中的选项可以任选，也可以不选，它们是 jar 命令的选项参数 -v　生成详细报告并打印到标准输出 -f　指定 JAR 文件名，通常这个参数是必须的 -m　指定需要包含的 MANIFEST 清单文件 -0　只存储，不压缩，这样产生的 JAR 文件包会比不用该参数产生的体积大，但速度更快 -M　不产生所有项的清单（MANIFEST〕文件，此参数会忽略 -m 参数 [jar-文件] 即需要生成、查看、更新或者解开的 JAR 文件包，它是 -f 参数的附属参数 [manifest-文件] 即 MANIFEST 清单文件，它是 -m 参数的附属参数 [-C 目录] 表示转到指定目录下去执行这个 jar 命令的操作。它相当于先使用 cd 命令转该目录下再执行不带 -C 参数的 jar 命令，它只能在创建和更新 JAR 文件包的时候可用。</description></item><item><title>在岸货币&amp;离岸货币的区别</title><link>https://linkall.pub/blog/onshore-offshore-money/</link><pubDate>Thu, 06 Jan 2022 09:54:42 +0000</pubDate><guid>https://linkall.pub/blog/onshore-offshore-money/</guid><description>离岸货币（Offshore Money） 是指在发行国以外进行存放款业务以及交易的货币，这里需要注意的是在境外流通的本国现金货币不是离岸货币。
相对应的，没有离岸的传统货币被称为 在岸货币（Onshore Money）。
什么是在岸人民币和离岸人民币 1、在岸人民币 在岸人民币通常用“CNY”表示，即央行授权中国外汇中心于每个工作日上午对外公布当日人民币兑换美元、欧元、日元、港币汇率的中间价作为当日银行间即期外汇市场以及银行柜台交易汇率的参考价格，这就叫在岸人民币。
在我国市场内，美元是不允许流通的，美元必须兑换成人民币，实行强制结汇的制度。因此，在岸人民币是不能反映出市场的需求的。除此之外，对于我国居民兑换人民币的额度也有限制，每年最高为5万元，汇率按照人民币汇率参考，兑换成为等值的美元。
2、离岸人民币 离岸人民币通常用“CNH”表示，即央行开放香港以及其他国家进行人民币交易的汇率就叫离岸人民币，而2010年中国香港实施的人民币离岸交易(CNH)已经是泛指海外离岸人民币交易。
目前最主要的市场是香港，除此之外还有新加坡、伦敦和台湾也有在积极经营。一般来说，国外的人是希望人民币升值，有利于进口，外面的企业才能在中国打开市场；国内的人想要人民币贬值，才会有利出口，打开海外市场。
两者之间有着什么样的联系和区别？ 那么都是人民币兑换外币，为什么还要分一个在岸汇率和离岸汇率呢？这是因为人民币还没有完全的国际化，这就造成了人民币在岸和离岸汇率的不同，他们又会如何相互联系呢？
1）国内换汇与国外换汇，两个市场的价格差别大，主要是因为价格形成机制的差异。
2）离岸人民币汇率，因为更加倾向于市场化，管制相对较少，所以波动更大。在岸人民币汇率，会受到央妈的影响，特别是当市场发生风险，央行会维护外汇的稳定而做出一些货币市场的调整。
3）离岸汇率、在岸汇率汇会相互影响，离岸汇率更多反映出市场的情况，在岸汇率汇反映出央妈态度。
4）在岸汇率和离岸汇率因为不相同，所以会产生一个差，一旦这个差过大，投机者就可以通过低汇率的一岸买进，通过高汇率的一岸卖出，从而进行卖出套利。
5）如果人民币大量的套利，又会很快的让离岸和在岸的汇率，两者之间差价快速减少。
两者的区别有哪些？ 在岸人民币的发展时间较为长，而且规模较大，受到我国政策的管制较多，因此受到央行的政策影响较为深。
与之相反的就是离岸人民币的发展历史较短，而且规模也比较小，涨跌主要是跟国际市场的形式有关系，更能够反应市场对于人民币的需求。具体区别如下：
1、在岸人民币和离岸人民币相比，离岸人民币更能够反映出经济数据的辩护，一旦出现出经济数据超过预期的情况，市场第一时间就出出现变动。
2、在岸和离岸的人民币流动性都会影响到汇率差价，一旦离岸人民币中人民币的市场流通不畅，离岸人民币升值，价差上涨；反之亦然。同时离岸人民币中美元流通不畅，也会影响人民币贬值，价差会出现下降。
3、因为离岸人民币受到国际金融市场的影响较为明显，因此当国际市场出现动荡的市场，两者的价差也会出现较为明显的价差。
摘自：人民币为什么有在岸和离岸之分呢？</description></item><item><title>MacBook如何取消开盖自动开机</title><link>https://linkall.pub/blog/macbook-cancel-auto-startup/</link><pubDate>Sat, 20 Nov 2021 10:55:08 +0000</pubDate><guid>https://linkall.pub/blog/macbook-cancel-auto-startup/</guid><description>从2016款的MacBook开始，苹果就为新的MacBook增加了开盖自动开机功能，每当我们翻开屏幕上盖以后，MacBook就会自动开机。这个功能确实挺方便的，但是还是有些朋友比较喜欢自己按一下开机键来完成开机！
这个功能确实挺方便的，但是还是有些有强迫症的朋友喜欢自己按一下开机键来开机，享受这个按一下的过程。
下面我们就来介绍一下，如何取消开盖自动开机。
取消翻盖自动开机 我们打开终端，输入 sudo nvram AutoBoot=%0 这行代码并回车，(然后输入用户密码回车即可)
sudo nvram AutoBoot=%0 恢复翻盖自动开机 如果想恢复原来的开盖自动开机，跟上面的操作一样，只是输入的代码变为：sudo nvram AutoBoot=%03，(然后输入用户密码回车即可)
sudo nvram AutoBoot=%03</description></item><item><title>【奧斯本檢核表】９招創新的簡單小技巧，激發你的創意點子</title><link>https://linkall.pub/blog/osborn-checklist/</link><pubDate>Sun, 05 Sep 2021 19:34:18 +0000</pubDate><guid>https://linkall.pub/blog/osborn-checklist/</guid><description>之前在誠品書店看書的時候，無意間看到有一本書上列了這樣的表格，表格旁邊也列舉了一些生活案例，當下看到就覺得這種激發腦袋的方式很不錯，可以突破自己的想像空間，原來創新也可以有技巧性。 許多成功的創新，或許僅僅是添加了一點小功能，就能帶來巨大的效益！那這個檢核表有那些檢核內容呢？這篇文章帶你來瞧瞧。 奧斯本檢核表是什麼？ # 創始人 亞歷克斯．奧斯本 ( Alex Faickney Osborn )，1888~1966年。 是一位美國的廣告主管，也是一位「腦力激盪之父」！ 他創立的機構有：Creative Education Foundation，同時也是 BBDO 的聯合創始人。
# 目的 「奧斯本檢核表」以創始人 Osborn 來命名，創造這個檢核表 (Osborn’s checklist) 的目的，就是要引導人們在創造過程中，可以利用 9 個不同的面向來進行問題思考，以此來拓寬人們的視野，打開思維的想像空間，最後可以產生新的想法、新的方案。 因此這個簡單又實用的檢核表也被稱作為「創作之母」，能讓你腦力大開！
# 優點 建立你的信心：
有了這個檢核表，你可以更勇於思考，更勇於發揮想像力！並且更勇於提問，更願意接受別人不同的提案跟指教，也願意迎接困難跟失敗。
容易發現問題：
檢核表提出的 9 個維度及 75 個問題，讓我們更易於找出問題所在及不尋常，找出被忽略的細節，還有哪裡可以做得更好，並且探討更好的解決方案。
拓寬思維格局：
其實每個人的思考格局都不太一樣，而且都會偏向比較特定的思路，所以藉由這個檢核表可以知道，思考的格局比你我想像的還要大。
消除思維惰性：
可能因為習慣或工作的關係，我們通常都會用我們常用的思維來進行思考，這樣大腦就可以偷懶一下，這也是大腦的舒適圈，但是利用檢核表可以刺激大腦做「腦筋急轉彎」，讓它脫離思維舒適圈，進而改變思考模式。
# 使用流程 一、**問題：**先找出目標明確需要解決的問題點。
二、**討論：**使用檢核表來核對，根據目標問題參照表中的項目，一個個列出問題，強制性地去探討跟核對，最後列出新的解決方案跟新的設想。
三、**篩選：**根據新提出的方案跟設想，篩選並做出最有價值跟創新性的結論。
# 使用小技巧 在會議當中，將每條問題或方案寫在一張卡片上，是不錯的方式。
因為可以在討論過程當中，隨機選擇或是抽換卡片，讓討論過程更有效率。
9 項檢核類型 # 中文版 檢核類型 檢核內容 1 能否他用 Other uses 有無新的用途？ 保持原狀不變的話，能否擴大用途？ 稍加改變，有無别的用途？ 2 能否借用 Adapt 能否從别處得到啓發？ 能否借用别處的經驗或發明？ 過去有無類似的東西？ 誰的東西可供模仿？ 有什麼可以複製的？ 現有的發明能否引入其他的創造性想法中？ 3 能否改變 Modify 可否改變一下形狀、味道、顏色、聲音？ 是否可改變一下意識、型號、運動形式、模具？ 4 能否放大 Magnify 能否擴大使用範圍？ 能不能增加一些東西？ 能否添加配件、拉長時間、增加頻率、提高強度、延長使用壽命、提高價值？ 能否長一點？高一點？厚一點？重一點？大一點？ 5 能否縮小 Minify 能否縮小體積、輕一點、低一點、薄一點、壓縮？ 能否省略一些配件？ 能否細分？ 6 能否替代 Substitute 可否採用其他成分、材質、製造程序、動力？ 可否以不同地點取代？ 其他聲調？ 其他時間？ 7 能否調整 Rearrange 調整元件？其他順序？布局？樣式？紋路？計畫？位置？ 能否早一點？晚一點？ 8 能否顛倒 Reverse 由內而外？正負相反？因果相反會如何？？ 角色可否互換？ 位置上下、左右、前後、橫豎、主次顛倒會如何？ 否定與肯定相反會如何？ 9 能否組合 Combine 重新組合、混合會如何？ 材料組合？形狀組合？功能組合？ 系統組合？觀念組合？目的組合？單位組合？ # 英文版 1 Other uses?</description></item><item><title>巴菲特的目標管理【5 / 25 法則】居然可以用刪去法來規劃目標？！</title><link>https://linkall.pub/blog/warren-buffett-5-25-rule/</link><pubDate>Sun, 05 Sep 2021 19:30:29 +0000</pubDate><guid>https://linkall.pub/blog/warren-buffett-5-25-rule/</guid><description>「股神巴菲特」是這個世紀人人皆知的一位人物，早年靠著超群的投資腦袋，快速累積出了自己的一大筆財富，複利跟價值投資可以說是他的代名詞。 而這樣一號人物，對於自我的管理跟目標的追求，也是跟別人不太一樣，而且並不是什麼高深的技巧，簡單的一張清單，就能看出你是不是真的想要達成你的目標！ 股神巴菲特 巴菲特出生於 1930 年的內布拉斯加州 (State of Nebraska) 他生在一個富裕的家庭，父親是兩任美國國會議員與成功的商人。
11 歲的巴菲特就有投資過股票。 14 歲用送報打工所存下的錢 $1200 美元，買地轉租給佃農。 大學畢業時已經擁有將近 $10000 美元。
富裕的家庭加上早期就開始接觸投資，對巴菲特的幫助非常多。
巴菲特獨特的投資心法「價值投資法」，一直都是許多人想學習的投資技巧之一，因為巴菲特運用這個方式創造了相當一大筆的財富，按照 Forbes.《富比士》2019 年 11 月的紀錄，巴菲特的淨資產達到了 825 億美元。
也就是說，你現在開始每年中獎 8 億美元，你也要連續中 100 年的時間才能跟上他的資產。
Warren Buffett
想了解更多巴菲特，有幾本推薦的書籍： 《雪球-巴菲特傳》：由一位巴菲特非常信任的記者，實際採訪巴菲特以及他身邊的人們編撰而成。 《股神巴菲特的神諭》：這本書的作者與巴菲特有 40 多年的私交，含括股神所有偉大交易的細節與思惟剖析。 《巴菲特給股東的信》：巴菲特每年都會給股東寫一封信，裡面說明投資概況與想法。
這樣成功的人，其實他還擁有超群的時間管理法則，與實踐目標的能力，讓他比別人完成的工作還要多得多，繼續往下看他與另一個人的故事。
Mike Flint 的故事 這就要說到【Mike Flint 弗林特】這個人物，弗林特是巴菲特的一位私人飛行員，已經有了 10 年的經驗，所以他們算是相當熟悉了。有一天巴菲特跟弗林特談論到了人生職涯的問題，巴菲特開始引導佛弗林特去思考，目前生活當中有哪些事情與目標，並且要從中去分析，具體流程如下：
1. 巴菲特先麻煩弗林特寫下目前他職業生涯的前 25 個目標。於是弗林特花了一點時間列出了 25 個職涯目標。
2. 接著，巴菲特在請弗林特從他列出的職涯清單內，「圈出」他心目中前 5 個目標，於是弗林特再次拿著清單思考，謹慎的決定出他 5 個最重要的目標。
3. 這時候，清單內就會有兩個部分，A 部分是弗林特圈出來的最重要的 5 個目標，另外 B 部份則是剩下的 20 個沒圈到的目標。</description></item><item><title>如何克服拖延症？用【蔡格尼效應】激發你想要完成的慾望！</title><link>https://linkall.pub/blog/zeigarnik-effect/</link><pubDate>Sun, 05 Sep 2021 19:19:10 +0000</pubDate><guid>https://linkall.pub/blog/zeigarnik-effect/</guid><description>拖延症一直是很多人的問題，有時候明明要做很多事情，任務清單也列出來了，但是一天天過去，能完成的項目少之又少。那為什麼有些人能夠克服重重難關，如期完成他們的任務清單？是不是克服拖延症也有訣竅？如果你想不到方法解決，不妨就來試試看”蔡格尼效應”吧！ 蔡格尼效應是什麼？ 蔡格尼效應，也稱蔡氏效應、紫格尼克效應，英文叫做 Zeigarnik effect，是 20 世紀俄國的心理學家「蔡格尼」發現的一個現象。如果你有一件已經完成的事情，跟一件還沒完成的事情，這兩件事相較之下，你會比較容易記得那一件還沒完成的事情。
簡單來說，**「未完成的事」或「被打斷的事情」**會比已經完成的事情印象更深刻。
如何發現蔡氏效應？ 那蔡格尼是如何發現這個現象的呢？
當時蔡格尼在一間餐廳吃飯，無意間發現了一個奇怪的現象
就是餐廳裡的服務生，在服務顧客的時候，可以非常熟練地記起每一位顧客所點的餐點
非常地詳細，而且還不用寫下來。
當服務生將餐點都送到顧客手中，完成了這筆訂單並結完帳，他再去問那位服務生的時候，那位服務生反而什麼都記不起來，剛剛超強的記憶能力立馬就消失了。
好像**「結帳」**像是一個開關，關閉了服務生對餐點的記憶。因此蔡格尼對這件事情很感興趣，回去之後就開始了他的實驗。
蔡氏效應的相關實驗 實驗室讓測試者分成 AB 兩組，這兩組都會給他們測試題目
實驗過程中，會讓 A 組的人順利作答完畢，而 B 組的人在作答的時候，則會受到中斷，無法完成測試。
測試結束之後，分別對 AB 兩組人進行記憶測試
結果發現
B 組的人因為作答遭到中斷，就會有些題目還沒完成，因此對那些「未完成的題目」印象深刻，甚至還會繼續思考如何作答。
A 組的人則因為順利作答完畢，而印象並不深。
蔡氏效應在生活中的例子 看小說、漫畫 有些人很喜歡看小說或漫畫，如果你是一名小說愛好者，當你晚上正在看一部迷人的小說時，就算你第二天要八點上課，還是會忍不住想看完它，因為書還沒翻到最後一頁，終究不能知道小說的結局。
如果晚上沒看完這本小說，有可能就會影響到你第二天的學習狀況，心裡總想著那本「昨天還沒看完的小說」，甚至想要跟朋友或同學分享。
電視連續劇 當手機網路還不是那麼普遍的時候，我們幾乎都是看著電視連續劇長大，不論是偶像劇或是台劇、日劇，每一集都會有起承轉合、高潮迭起，像是最近爆紅的台劇就是「我們與惡的距離」。
如果你是追劇的人，那你一定會發現到，每一次劇中正要播到最高潮的時候，都一定會有 1、2 則廣告的插入，這時候你可能就會耐心看完廣告，想趕快把這一集看完。
如果是進入下集預告的話，那接下來的這一天或是這幾天，你心中可能都會牽掛著「上一集的劇情」，因此還跟朋友熱烈討論。
買東西 買東西，我們大家都有無數的經驗，日常用品或是吃喝玩樂，生活總是離不開消費，但平凡的我們，也會有想買卻也買不到的時候。
有可能是東西太貴了，限時或打折的時候，我們錯過的購入的時機，因此讓人念念不忘，下次就會關注更好的購買時機。
蔡氏效應帶來的啟發 綜合以上的例子，可以看出我們對於沒有完成的事情，像是沒看完的小說、沒看完的劇、沒買到的東西，都會有種莫名的動力，讓我們的大腦用不計成本的方式，去完成一整件事情。
我們會因為「未完成的事」而感到焦慮，你可能會因為這些事情晚上睡不著，也可能影響隔天的學習或工作效率，甚至做事的時候，只想草率結束，趕快回家看劇、看小說。
所以想要解除這種焦慮感，最直接的方法就是完成那些「未完成的事」。而如果能把這種動力用在正向的事情上，那你的人生會有很大的幫助！
得不到的，永遠在騷動
如何應用在改善拖延症？ 為什麼蔡氏效應可以應用在改善拖延症呢？首先可以想想看，為什麼我們會有拖延症，主要可能有以下幾個原因：
1. 沒有計畫性 2. 沒有時間觀念 3. 環境誘惑太多 4. 不是你主動想做的事情 5. 事情不夠緊急 6. 事情對你沒幫助 拖延症的例子 如果要舉一個最簡單的例子，應該就是小時候的**「暑假作業」**了
除非你是熱愛學習的學生，不然小時候幾乎大部分的人，都不太喜歡它，好不容易終於可以放長假，當然可以玩就先玩囉，反正暑假有兩個月，暑假作業一定做得完。
但是隨著開學的日子逐漸接近，已經有一部份的人開始著手寫暑假作業了，但仍然有很多人還沒開始動筆，甚至已經忘了暑假作業的存在，搞不好丟到哪裡了都不知道。
結果看來，大部分的人都是在開學之前的前幾天，趕完他們的暑假作業，而少部分的人會提早寫完
剩下的人，已經不是拖延症，而是「失憶症」了吧，根本沒動過暑假作業！</description></item><item><title>SCAMPER【奔馳法】是什麼？７個思維角度幫你突破創意極限</title><link>https://linkall.pub/blog/scamper/</link><pubDate>Sun, 05 Sep 2021 19:15:09 +0000</pubDate><guid>https://linkall.pub/blog/scamper/</guid><description>奔馳法 SCAMPER，從字面上可能看不出是什麼意思，但其實它是一連串英文的縮寫，是一種腦力激盪 (Brainstorming) 的方式，藉由這個方式，可以大大的提升你的創造力！ 如果工作上常常缺乏創意的靈感，或是某些問題無法找到解答時，善用這個思維技巧，不但可以縮短你思考的時間，還有可能有突破性的創意發想！ 奔馳法是什麼 這個方法其實最一開始是由「奧斯本檢核表」的發明者奧斯本 ( Alex Osborn ) 在1953年的時候提出，後來有一位教育兼作家的鮑伯‧伊瓦爾 (Bob Eberle)，他根據奧斯本的腦力激盪法，整理出了一套較簡化的創意思維模式 SCAMPER 奔馳法，在他的著作《Scamper: Games for Imagination Development》也有相關的應用。
點此前往博客來購買
把這樣的創意流程，簡化成 Scamper 一個單字，是不是很方便記憶了呢！這其實就是一種記憶術 (Mnemonic)，也因此這個方式比「奧斯本檢核表」更被人所使用。
因為奔馳法會有七個思考的切入點，所以你可以運用這些切入點，進行腦力激盪，創造出各種不同的創意點子，來幫助你開發新的產品，藉此來改善現有的產品。
需要注意的是：這裡的「產品」，並不僅指實體物品，也可以是各種流程、服務，或是各種人，所以其實這個方式可以用在各種領域，依情況而定。
延伸閱讀：奧斯本檢核表【Osborn Checklist】9 招創新的簡單小技巧，激發你的創意點子
使用步驟 第一步 你可以找出一項產品或是一種服務，而這個產品或服務可以是你所想要改進的，也有可能本身就存在著一些問題，目標找出來之後，就可以進行第二個步驟了。
第二步 就是使用「奔馳法」，針對這個產品進行一連串的腦力激盪開發，奔馳法有七種不同的創意領域，而且在進行創意發想的階段，可以盡可能的去找出所有的問題點，把這些問題一一條列出來，並且找出解答。(可以運用下方的思維角度找看看問題)
第三步 也就是把所有的答案都整理好，跟大家探討哪個方案最適合，可以讓改善後的產品煥然一新，如果有兩個以上的好方案，就再進一步地去探討。
七個思維角度 由於有各種不同的版本，因此在這邊整合出以下七點以及細部問題。
【S】替代 Substitute 有沒有替代的材料或資源來改善產品？ 有沒有替代的產品或程序？ 有沒有替代的規則？ 有沒有替代的地方可以使用產品？ 用不同的心態或是感覺使用產品會發生什麼事？ 替代的人、時間、地點、物品、方法？ 【C】整合 Combine 如果跟另一個產品組合會發生什麼事？ 把目的或目標整合起來會如何？ 如果要最大限度地使用產品，你會把產品跟什麼組合在一起？ 產品組合人才或是資源可以創造什麼新方法？ 【A】調整 Adapt 這個產品有像其他東西嗎？ 有其他的東西像你的產品嗎？ 可以模仿誰？ 有那裡可以調整？ 有沒有其他的產品可以提供你靈感？ 【M】修改 Modify、Magnify 改變形狀、外觀、顏色、觸感、觀念？ 可以再添加什麼？(聲音、味道、功能) 有什麼地方或元素可以加強或是顯眼一點，來顯現它的價值？ 寬一點、大一點、重一點、長一點？ 【P】其他用途 Put to other uses 這個產品可以在別的行業使用嗎？ 還有誰可以使用這個產品？ 產品在不同設定或目的下會有什麼表現？ 產品若是成為廢品，還有什麼可以再利用的？ 【E】消除 Eliminate、Minify 可以怎麼簡化產品？ 功能、部分、規則有那裡可以簡化？ 可以小一點？輕一點？濃縮？ 如果拿走產品的一部份會如何？ 【R】重組 Rearrange、Reverse 顛倒或不同的順序，會發生什麼事？ 改變上下、左右、前後、內外、佈局呢？ 相反的操作會發生什麼事？ 角色調換或撤銷會如何？ 你會如何重組產品？ 實際應用例子 以下對 SCMAPER 的每個檢核類型，提供一些範例，讓大家參考看看。</description></item><item><title>【番茄工作法】是什麼？25 分鐘讓你邁向專注的高效人生</title><link>https://linkall.pub/blog/pomodoro-technique/</link><pubDate>Sun, 05 Sep 2021 19:02:30 +0000</pubDate><guid>https://linkall.pub/blog/pomodoro-technique/</guid><description>「時間」一直都是人生當中的一個重要課題，但因為生活當中的事情太多，這些事情一直都在分散我們的注意力，導致我們能專注的機會越來越少，而想要成功，往往離不開高度的專注力。 近年來，就出現了一種適合時間管理的好工具：「番茄工作法」，利用切割工作時間的方式，訓練我們的專注力，並有效提高我們的工作效率！ [TOC]
創始人及由來 法蘭西斯科．西里洛 (Francesco Cirillo) 在 1980 年代創造出「番茄鐘工作法」 ，原文為 Pomodoro Technique，Pomodoro 在義大利文中為「番茄」的意思。
當時的他為了要準備考試，需要念完三本書，但因為環境干擾因素太多，以至於讓他很容易分心，遲遲無法好好念書。
不過，他無意間發現到廚房裡有一個**「番茄鐘計時器」**，他透過使用這個番茄鐘，讓心情平靜不少，並提高了許多專注力，好好專心看書，得以讓他通過考試。
他在想，為什麼這個番茄鐘會這麼有效？有沒有一個合適的設定時間？每個番茄鐘之間需要間隔多久？一天可以有多少個番茄鐘時段？
後來，他也把這套時間管理法傳授給別人，並且把這個番茄工作法系統化，經過多次的實驗與驗證，他得到的結論是，工作 25 分鐘，間隔 5 分鐘，是最理想、效率較高的一種方式。
現在也有很多認會把「番茄鐘工作法」這套時間管理法，簡稱為「番茄工作法」，所以接下來都會使用這個簡稱。
五個階段 番茄工作法，簡單來說可分為五個階段：計劃、追蹤、記錄、分析與可視化。
**計劃：**計劃一天內要做的事 **追蹤：**收集行動的相關數據 **記錄：**將整天收集下來的數據記錄歸檔 **分析：**將每次的數據分析並轉化成資訊 **可視化：**透過資訊可視化，進行調整改善 具體步驟 Step 1 設定任務 預先設定好你想要完成的事情或是任務，無論大事或小事，可以用 「清單」 的方式條列出來。
Step 2 設定番茄鐘 設定你的番茄鐘，也就是你的工作時間，通常為 25 分鐘，除了傳統的番茄鐘，你也可以使用 APP 或是任何一種計時器。另外，計算一下你的每個任務，需要花費多少個番茄鐘。
Step 3 專注做事 一旦開始工作或是執行任務時，想辦法不被干擾，全神貫注，直到完成你的工作。
Step 4 做記號 25 分鐘過去之後，不管你的工作有沒有完成，都先暫停一下，並且在任務清單上**「做個記號」**。 例如：打勾、劃線、畫個番茄。
Step 5 短暫休息 做完記號就可以休息個 5 分鐘，這短短的 5 分鐘，可以進行一些輕鬆的活動，只要跟工作無關的都可以。 例如：上廁所、喝水、身體伸展、起身走一走…等等。
Step 6 休息 15-30 分鐘 上述 1 ~ 5 的步驟【25 min 番茄鐘+ 5 min 休息】為一個小循環，每次短暫休息 5 分鐘之後，繼續進行下一個番茄鐘，通常連續 4 個番茄鐘，也差不多兩小時過去了，就可以讓自己休息比較長的時間，大約為 15 ~ 30 分鐘。</description></item><item><title>如何提高工作效率？【艾維利時間管理法】５個步驟，世界公認簡單又有效的方法！</title><link>https://linkall.pub/blog/how-to-improve-work-efficiency-by-using-the-ivy-lee-method/</link><pubDate>Sat, 04 Sep 2021 19:25:46 +0000</pubDate><guid>https://linkall.pub/blog/how-to-improve-work-efficiency-by-using-the-ivy-lee-method/</guid><description>覺得自己工作沒效率嗎？是不是很多工作，都要花相當大的時間精力去完成呢？每個人的時間都是 24 個小時，總是有人做事效率特別快，是不是有什麼訣竅，還是天賦的差異？ 其實工作要有效率並不難，而且世界上有一個公認好用的方式，「艾維利時間管理法」，已經被使用超過 1 個世紀。這篇文章帶你來了解。 名稱 中文：艾維利時間管理法 英文：Ivy Lee Time Management Act / The Ivy Lee Method
由來 1918 年，當時美國有一間大型鋼鐵公司 (Bethlehem Steel Corporation)，總裁是 Charles M. Schwab 施瓦布，他也是當時最有錢的富人之一。有一天 Schwab 想要提升公司的團隊工作效率，邀請了當時有名的生產力顧問艾維利 (Ivy Lee)，來跟公司的人開會。
艾維利本身也是一名成功的商人，艾維利要求跟每位公司的高管做 15 分鐘的會談，而且當下不索取費用，只建議施瓦布檢視接下來三個月的成效。如果方法有效，再給艾維利一張支票，給這個方法兌現一個適當的費用。
之後三個月，公司的執行團隊按照艾維利提供的方法執行，施瓦布對工作進展感到很滿意，最後就給了艾維利一張價值 $25,000 美元的支票。
1918 年 $25,000 的支票，相當於 2015 年 400,000 的支票。
艾維利時間管理法 # 5 個詳細步驟 在每個工作日結束之後，寫下 6 項你明天最需要完成的事情或任務，別寫超過 6 項。 按照他們的重要性，以數字排列它們的順序，寫出優先列表。 明天的時候，優先完成第 1 個任務，直到第 1 個任務完成，再進行第 2 個任務。 用相同的方式處理其他任務。一天結束之後，將當天未完成的任務移至隔天的 6 項任務列表當中。 每個工作日都重複上面 4 個步驟。 # 英文版 At the end of each work day, write down the six most important things you need to accomplish tomorrow.</description></item><item><title>mac改写rm命令：移到废纸篓</title><link>https://linkall.pub/blog/mac-rename-rm-to-trash/</link><pubDate>Mon, 28 Jun 2021 11:08:51 +0000</pubDate><guid>https://linkall.pub/blog/mac-rename-rm-to-trash/</guid><description>使用trash脚本替换rm命令，它的实质是调用finder的api进行删除操作，也就是移除到废纸篓，也就拥有了废纸篓的恢复源文件功能。
安装trash 使用homebrew安装trash
$ brew install trash 此时已经可以使用trash -fr filename，命令与rm一样。但是由于已经习惯性地使用rm命令，改成trash还是有时会习惯性地使用rm删除，因此将rm替换为trash
使用trash替换rm命令 在(~/.bash_profile|~/.zshrc)文件中将rm指向trash，添加下列语句。
## 安装了一个 trash 命令，替代 rm 命令，被删除的文件会放到垃圾桶 alias rm=&amp;#34;trash&amp;#34; 使用source命令生效。
此时使用rm命令删除文件后会发现文件在废纸篓里了，而且可以使用放回原处的功能。</description></item><item><title>kubernetes coredns无法解析私有harbor域名问题处理</title><link>https://linkall.pub/blog/k8s-coredns-looksup-local-harbor-domain/</link><pubDate>Thu, 03 Jun 2021 08:29:14 +0000</pubDate><guid>https://linkall.pub/blog/k8s-coredns-looksup-local-harbor-domain/</guid><description>修改coredns配置，增加host对应；
1,/etc/hosts 添加相关的域名解析 xx.xx.xx.xx harbor.alexdev.com 2，修改coredns configmap，添加hosts语段： # kubectl get cm coredns -n kube-system -o yaml apiVersion: v1 data: Corefile: | .:53 { errors health { lameduck 5s } ready kubernetes cluster.local in-addr.arpa ip6.arpa { pods insecure fallthrough in-addr.arpa ip6.arpa } ## 主要为以下内容(注意末尾添加 .cluster.local)： ## hosts内部可以添加多个域名 hosts { xx.xx.xx.xx harbor.alexdev.com.cluster.local fallthrough } prometheus :9153 forward . /etc/resolv.conf { prefer_udp } 3,添加后，如果pod内仍无法ping通域名，可以删除coredns pod，重新加载cm文件 # kubectl get pods -A|grep coredns kube-system coredns-6b55b6764d-7wdsq 1/1 Running 1 18h kube-system coredns-6b55b6764d-d4q72 1/1 Running 1 18h # kubectl delete pod coredns-6b55b6764d-7wdsq -n kube-system # kubectl delete pod coredns-6b55b6764d-d4q72 -n kube-system 4,测试 kubectl run -i --tty --image busybox:1.</description></item><item><title>在Mac下远程登录Linux时,提示cannot change locale (UTF-8) No such file or directory</title><link>https://linkall.pub/blog/setlocale-lc-ctype-cannot-change-locale/</link><pubDate>Wed, 05 May 2021 20:30:12 +0000</pubDate><guid>https://linkall.pub/blog/setlocale-lc-ctype-cannot-change-locale/</guid><description>问题描述 Mac下设置第一语言为English 在Terminal或者iTerm2上登录远端Linux时，Linux的prompt提示 setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory 登录Linux后无法正常显示中文 原因 Mac下设置为英文后，locale字符集默认是”C”，Terminal或者iTerm2中有选项会自动设置LC_CTYPE或者LC_LANG为UTF-8 Mac下ssh客户端的配置文件/etc/ssh/ssh_config中，会尝试设置本地的LANG到远端服务器中。 远端Linux服务器，没有UTF-8的字符集，就导致了setlocale的警报 解决办法 为了登录而来，修改每个服务器的字符集，操作上是不可行的。最简单的办法就是修改Mac本地的ssh客户端配置，不要将LANG设置发送到服务器端。 打开ssh配置文件，sudo vim /etc/ssh/ssh_config, 注释掉如下几行
Host * SendEnv LANG LC_* 重新ssh到服务器，就不会再有setlocale的告警了。</description></item><item><title>CentOS7设置内核启动顺序</title><link>https://linkall.pub/blog/centos-grub2-modify/</link><pubDate>Thu, 15 Apr 2021 09:12:47 +0000</pubDate><guid>https://linkall.pub/blog/centos-grub2-modify/</guid><description>1、查看设备上安装了几个内核
$ cat /boot/grub2/grub.cfg |grep menuentry if [ x&amp;#34;${feature_menuentry_id}&amp;#34; = xy ]; then menuentry_id_option=&amp;#34;--id&amp;#34; menuentry_id_option=&amp;#34;&amp;#34; export menuentry_id_option menuentry &amp;#39;CentOS Linux (3.10.0-1160.24.1.el7.x86_64) 7 (Core)&amp;#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &amp;#39;gnulinux-3.10.0-1127.el7.x86_64-advanced-1760fedb-5552-4ad8-97c1-d1cf555ce12a&amp;#39; { menuentry &amp;#39;CentOS Linux (5.4.111-1.el7.elrepo.x86_64) 7 (Core)&amp;#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &amp;#39;gnulinux-3.10.0-1127.el7.x86_64-advanced-1760fedb-5552-4ad8-97c1-d1cf555ce12a&amp;#39; { menuentry &amp;#39;CentOS Linux (3.10.0-1127.el7.x86_64) 7 (Core)&amp;#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &amp;#39;gnulinux-3.10.0-1127.el7.x86_64-advanced-1760fedb-5552-4ad8-97c1-d1cf555ce12a&amp;#39; { menuentry &amp;#39;CentOS Linux (0-rescue-c37a4d8b3c8d46958beaeafb2f03d2ba) 7 (Core)&amp;#39; --class centos --class gnu-linux --class gnu --class os --unrestricted $menuentry_id_option &amp;#39;gnulinux-0-rescue-c37a4d8b3c8d46958beaeafb2f03d2ba-advanced-1760fedb-5552-4ad8-97c1-d1cf555ce12a&amp;#39; { 2、查看当前内核</description></item><item><title>Linux系统消除未被及时释放的TIME_WAIT状态的TCP连接</title><link>https://linkall.pub/blog/time-wait/</link><pubDate>Fri, 09 Apr 2021 15:13:09 +0000</pubDate><guid>https://linkall.pub/blog/time-wait/</guid><description>Linux系统下，TCP连接断开后，会以TIME_WAIT状态保留一定的时间，然后才会释放端口。当并发请求过多的时候，就会产生大量的TIME_WAIT状态的连接，无法及时断开的话，会占用大量的端口资源和服务器资源。这个时候我们可以优化TCP的内核参数，来及时将TIME_WAIT状态的端口清理掉。
[root@web1 ~]netstat -n | awk &amp;#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&amp;#39; TIME_WAIT 1280 FIN_WAIT1 7 SYN_SENT 1 FIN_WAIT2 7 ESTABLISHED 247 LAST_ACK 1 我们只用关心TIME_WAIT的个数，在这里可以看到，有1280多个TIME_WAIT，这样就占用了1280多个端口，端口的数量只有65535个，占用一个少一个，会严重的影响到后继的新连接，就需调整下Linux的TCP内核参数，让系统更快的释放TIME_WAIT连接。
vi /etc/sysctl.conf 增加如下内容：
net.ipv4.tcp_syncookies = 1 #表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭； net.ipv4.tcp_tw_reuse = 1 #表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭； net.ipv4.tcp_tw_recycle = 1 #表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭； net.ipv4.tcp_fin_timeout = 30 #修改系統默认的 TIMEOUT 时间。 sysctl -p 让内核参数生效 流量小的机器一般就可以了，如果是大流量机器增加如下参数：
net.ipv4.tcp_keepalive_time = 1200 #表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。 net.ipv4.ip_local_port_range = 10000 65000 #表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为10000到65000。（注意：这里不要将最低值设的太低，否则可能会占用掉正常的端口！） net.ipv4.tcp_max_syn_backlog = 8192 #表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。 net.ipv4.tcp_max_tw_buckets = 6000 #表示系统同时保持TIME_WAIT的最大数量，如果超过这个数字，TIME_WAIT将立刻被清除并打印警告信息。默认180000，改为6000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少TIME_WAIT套接字数量，但是对于 Squid，效果却不大。此项参数可以控制TIME_WAIT的最大数量，避免Squid服务器被大量的TIME_WAIT拖死。 内核其他TCP参数说明： net.</description></item><item><title>FireFox和Chrome浏览器Cookies存储路径记录</title><link>https://linkall.pub/blog/firefox-chrome-cookies/</link><pubDate>Sat, 20 Mar 2021 17:55:11 +0000</pubDate><guid>https://linkall.pub/blog/firefox-chrome-cookies/</guid><description>Firefox Windows Cookie数据位于：%APPDATA%\Mozilla\Firefox\Profiles\ 目录中的xxx.default目录，名为cookies.sqlite的文件，如
C:\Users\xxx\AppData\Roaming\Mozilla\Firefox\Profiles\hsi4acx.default\cookies.sqlite Mac 官网
Finding your profile without opening Firefox Click the Finder icon in the dock. On the menu bar, click the Go menu, hold down the option or alt key and select Library. A window will open containing your Library folder. Open the Application Support folder, then open the Firefox folder, and then the Profiles folder. Your profile folder is within this folder. If you only have one profile, its folder would have &amp;ldquo;default&amp;rdquo; in the name.</description></item><item><title>nginx 80端口重定向到443端口</title><link>https://linkall.pub/blog/nginx-ssl/</link><pubDate>Sun, 07 Feb 2021 15:58:32 +0000</pubDate><guid>https://linkall.pub/blog/nginx-ssl/</guid><description>使用如下配置即可
server { listen 80; server_name www.test.com; rewrite ^(.*)$ https://${server_name}$1 permanent; }</description></item><item><title>macOS BigSur下无法在根目录创建/data解决方法</title><link>https://linkall.pub/blog/bigsur-mkdir-data/</link><pubDate>Thu, 14 Jan 2021 10:51:54 +0000</pubDate><guid>https://linkall.pub/blog/bigsur-mkdir-data/</guid><description>sudo vim /etc/synthetic.conf 添加
data /System/Volumes/Data/data /System/Volumes/Data/data目录为目标目录，(data和/xxx/data之间是tab不是空格)。
注意：如果/etc/synthetic.conf文件只读，不能编辑，请切换到root用户。
重启解决</description></item><item><title>vue-router的history模式nginx配置</title><link>https://linkall.pub/blog/vue-router-history-nginx-config/</link><pubDate>Wed, 06 Jan 2021 17:15:12 +0000</pubDate><guid>https://linkall.pub/blog/vue-router-history-nginx-config/</guid><description>原理是：将解析转为index.html页面
server { listen 80; server_name avue-data.meipinshu.cn; location / { index index.html; root /data/wwwroot; try_files $uri $uri/ /index.html; } }</description></item><item><title>解决MacOS升级后出现xcrun: error: invalid active developer path, missing xcrun的问题</title><link>https://linkall.pub/blog/resolve-update-xcode-error/</link><pubDate>Mon, 28 Dec 2020 00:18:31 +0000</pubDate><guid>https://linkall.pub/blog/resolve-update-xcode-error/</guid><description>升级Mac系统后，使用shell命令，或者node之类的报错：
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun 解决方法，重装xcode command line：
xcode-select --install 如果没有解决问题，执行以下命令
sudo xcode-select -switch /</description></item><item><title>npm换源</title><link>https://linkall.pub/blog/npm-change-registry/</link><pubDate>Mon, 28 Dec 2020 00:04:14 +0000</pubDate><guid>https://linkall.pub/blog/npm-change-registry/</guid><description>[toc]
一些镜像地址： 淘宝npm镜像 搜索地址：http://npm.taobao.org/ registry地址：http://registry.npm.taobao.org/ cnpmjs镜像 搜索地址：http://cnpmjs.org/ registry地址：http://r.cnpmjs.org/ 换源方法 npm临时换源 npm install express --registry=https://registry.npm.taobao.org 持久使用 npm config set registry https://registry.npm.taobao.org // 配置后可通过下面方式来验证是否成功 npm config get registry // 或npm info express 通过cnpm npm install -g cnpm --registry=https://registry.npm.taobao.org // 使用cnpm install expresstall express</description></item><item><title>python - pip换源，更换pip源到国内镜像</title><link>https://linkall.pub/blog/python-pip-mirror/</link><pubDate>Fri, 18 Dec 2020 18:28:53 +0000</pubDate><guid>https://linkall.pub/blog/python-pip-mirror/</guid><description>pip国内的一些镜像 阿里云 http://mirrors.aliyun.com/pypi/simple/ 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/ 豆瓣(douban) http://pypi.douban.com/simple/ 清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/ 中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/ 修改源方法： 临时使用： 可以在使用pip的时候在后面加上-i参数，指定pip源
pip install scrapy -i https://pypi.tuna.tsinghua.edu.cn/simple 永久修改： linux: 修改 ~/.pip/pip.conf (没有就创建一个)， 内容如下： [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple windows: 直接在user目录中创建一个pip目录，如：C:\Users\xx\pip，新建文件pip.ini，内容如下 [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple</description></item><item><title>Mac操作系统下怎么显示隐藏文件</title><link>https://linkall.pub/blog/mac-finder-hide-show/</link><pubDate>Thu, 17 Dec 2020 21:07:47 +0000</pubDate><guid>https://linkall.pub/blog/mac-finder-hide-show/</guid><description>第一步：打开「终端」应用程序。
第二步：输入如下命令：
defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder 第三步：按下「Return」键确认。
现在你将会在 Finder 窗口中看到那些隐藏的文件和文件夹了。
如果你想再次隐藏原本的隐藏文件和文件夹的话，将上述命令替换成
defaults write com.apple.finder AppleShowAllFiles -boolean false ; killall Finder</description></item><item><title>mac终端Iterm2支持rz和sz的解决方案</title><link>https://linkall.pub/blog/mac-lrzsz/</link><pubDate>Tue, 15 Dec 2020 19:31:37 +0000</pubDate><guid>https://linkall.pub/blog/mac-lrzsz/</guid><description>在mac下，实现与服务器进行便捷的文件上传和下载操作：
安装支持rz和sz命令的lrzsz：
brew install lrzsz 在本地/usr/local/bin/目录下保存iterm2-send-zmodem.sh 和iterm2-recv-zmodem.sh两个脚本
两个文件链接：https://github.com/aikuyun/iterm2-zmodem
设置一下两个脚本的权限，一般 chmod 777 就行了 设置Iterm2的Tirgger特性，profiles-&amp;gt;default-&amp;gt;editProfiles-&amp;gt;Advanced中的Tirgger
添加两条trigger，分别设置Regular expression，Action，Parameters，Instant如下： 1.第一条 Regular expression: rz waiting to receive.\*\*B0100 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-send-zmodem.sh Instant: checked 2.第二条 Regular expression: \*\*B00000000000000 Action: Run Silent Coprocess Parameters: /usr/local/bin/iterm2-recv-zmodem.sh Instant: checked</description></item><item><title>Datagrip导入导出数据库设置</title><link>https://linkall.pub/blog/datagrip-move-database-setting/</link><pubDate>Fri, 11 Dec 2020 14:48:30 +0000</pubDate><guid>https://linkall.pub/blog/datagrip-move-database-setting/</guid><description>导出数据库设置 选中想要导出数据设置 呼出热键命令 cmd+shift+a 输入 Database Tools 选中 Copy Settings 然后粘贴到文本中就可以保存配置 导入数据库配置 复制到导出的配置内容，可以分段拷贝配置 呼出热键命令 cmd+shift+a 输入 Import from Clipboard 注意 剪切板导入的数据库配置，可以另存为文件 导出的配置没有密码，需要自行重新配置密码 https://stackoverflow.com/questions/37931260/how-to-export-import-a-data-source-from-datagrip</description></item><item><title>Java ImageIO 图片处理后变红 解决办法记录</title><link>https://linkall.pub/blog/image-io-write-jpeg/</link><pubDate>Mon, 07 Dec 2020 23:20:07 +0000</pubDate><guid>https://linkall.pub/blog/image-io-write-jpeg/</guid><description>原因：根据网上搜罗的一大堆文章以及自己的发现，是因为原始图片（jpeg）带有alpha通道才会变红，在mac上直接显示简介的看到。 然后发现使用下面这个方式可以解决变红的问题 // 把这行换成下面的方式 BufferedImage image = ImageIO.read(originFile); // 这里是直接根据url读取图片 public static BufferedImage getBufferedImage(String imgUrl) throws MalformedURLException { URL url = new URL(imgUrl); ImageIcon icon = new ImageIcon(url); Image image = icon.getImage(); // 如果是从本地加载，就用这种方式，没亲自测试过 // Image src=Toolkit.getDefaultToolkit().getImage(filePath); // This code ensures that all the pixels in the image are loaded BufferedImage bimage = null; GraphicsEnvironment ge = GraphicsEnvironment .getLocalGraphicsEnvironment(); try { int transparency = Transparency.OPAQUE; GraphicsDevice gs = ge.getDefaultScreenDevice(); GraphicsConfiguration gc = gs.</description></item><item><title>本地代理pac文件</title><link>https://linkall.pub/blog/pac-file/</link><pubDate>Sun, 06 Dec 2020 12:35:54 +0000</pubDate><guid>https://linkall.pub/blog/pac-file/</guid><description>// Generated by gfwlist2pac in precise mode // https://github.com/clowwindy/gfwlist2pac var proxy = &amp;#34;SOCKS5 10.10.10.1:1080; SOCKS 10.10.10.1:1080; DIRECT;&amp;#34;; var rules = [ &amp;#34;|http:\/\/85.17.73.31\/&amp;#34;, &amp;#34;||clipconverter.cc&amp;#34;, &amp;#34;||agnesb.fr&amp;#34;, &amp;#34;||akiba-web.com&amp;#34;, &amp;#34;||altrec.com&amp;#34;, &amp;#34;||angela-merkel.de&amp;#34;, &amp;#34;||angola.org&amp;#34;, &amp;#34;||apartmentratings.com&amp;#34;, &amp;#34;||apartments.com&amp;#34;, &amp;#34;||arena.taipei&amp;#34;, &amp;#34;||asianspiss.com&amp;#34;, &amp;#34;||assimp.org&amp;#34;, &amp;#34;||athenaeizou.com&amp;#34;, &amp;#34;||azubu.tv&amp;#34;, &amp;#34;||bankmobilevibe.com&amp;#34;, &amp;#34;||banorte.com&amp;#34;, &amp;#34;||bash-hackers.org&amp;#34;, &amp;#34;||beeg.com&amp;#34;, &amp;#34;||global.bing.com&amp;#34;, &amp;#34;||bloombergview.com&amp;#34;, &amp;#34;||booktopia.com.au&amp;#34;, &amp;#34;||boysmaster.com&amp;#34;, &amp;#34;||bynet.co.il&amp;#34;, &amp;#34;||carfax.com&amp;#34;, &amp;#34;.casinobellini.com&amp;#34;, &amp;#34;||casinobellini.com&amp;#34;, &amp;#34;||centauro.com.br&amp;#34;, &amp;#34;||chobit.cc&amp;#34;, &amp;#34;||clearsurance.com&amp;#34;, &amp;#34;||images.comico.tw&amp;#34;, &amp;#34;||static.comico.tw&amp;#34;, &amp;#34;||counter.social&amp;#34;, &amp;#34;||costco.com&amp;#34;, &amp;#34;||crossfire.co.kr&amp;#34;, &amp;#34;||d2pass.com&amp;#34;, &amp;#34;||darpa.mil&amp;#34;, &amp;#34;||dawangidc.com&amp;#34;, &amp;#34;||deezer.com&amp;#34;, &amp;#34;||desipro.de&amp;#34;, &amp;#34;||dingchin.com.tw&amp;#34;, &amp;#34;||discord.com&amp;#34;, &amp;#34;||discord.gg&amp;#34;, &amp;#34;||discordapp.com&amp;#34;, &amp;#34;||discordapp.net&amp;#34;, &amp;#34;||dish.com&amp;#34;, &amp;#34;|http:\/\/img.dlsite.jp\/&amp;#34;, &amp;#34;||dm530.net&amp;#34;, &amp;#34;share.dmhy.org&amp;#34;, &amp;#34;||dmhy.org&amp;#34;, &amp;#34;||dmm.</description></item><item><title>CentOS 7 配置 Supervisor</title><link>https://linkall.pub/blog/supervisor-handbook/</link><pubDate>Sat, 21 Nov 2020 11:58:04 +0000</pubDate><guid>https://linkall.pub/blog/supervisor-handbook/</guid><description>Supervisor 的文档地址：http://www.supervisord.org/
安装 Supervisor yum install -y epel-release yum install -y supervisor 2. 配置 Supervisor Supervisor 的配置文件为：/etc/supervisord.conf ，Supervisor 所管理的应用的配置文件放在 /etc/supervisord.d/ 目录中，这个目录可以在 supervisord.conf 中配置。
启动 Supervisor supervisord -c /etc/supervisor.conf 通过这种方式启动，服务器重启后 Supervisor 不会自动启动，不建议使用这种方式启动Supervisor。
安装 Supervisor 后，在 /usr/lib/systemd/system/ 目录中会有一个 supervisord.service 文件，用下面的内容替换：
# supervisord service for sysstemd (CentOS 7.0+) # by ET-CS (https://github.com/ET-CS) [Unit] Description=Supervisor daemon [Service] Type=forking ExecStart=/usr/bin/supervisord ExecStop=/usr/bin/supervisorctl $OPTIONS shutdown ExecReload=/usr/bin/supervisorctl $OPTIONS reload KillMode=process Restart=on-failure RestartSec=42s [Install] WantedBy=multi-user.target 启用开机启动
systemctl enable supervisord.service 启动Supervisor</description></item><item><title>es设置开机自启动</title><link>https://linkall.pub/blog/es-service-install/</link><pubDate>Thu, 22 Oct 2020 11:18:53 +0000</pubDate><guid>https://linkall.pub/blog/es-service-install/</guid><description>[toc]
新建脚本 vi /etc/init.d/es 填入如下内容：
#!/bin/sh #chkconfig: 2345 80 05 #description: elasticsearch #jdk相关路径 export JAVA_HOME=/var/local/java/jdk1.8.0_241 export JAVA_BIN=/var/local/java/jdk1.8.0_241/bin export PATH=$PATH:$JAVA_HOME/bin export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME JAVA_BIN PATH CLASSPATH case &amp;#34;$1&amp;#34; in start) #es的启动账号名 su es&amp;lt;&amp;lt;! #es的安装路径 cd /data/elasticsearch-6.8.11/ ./bin/elasticsearch -d ! echo &amp;#34;elasticsearch startup&amp;#34; ;; stop) es_pid=`ps aux|grep elasticsearch | grep -v &amp;#39;grep elasticsearch&amp;#39; | awk &amp;#39;{print $2}&amp;#39;` kill -9 $es_pid echo &amp;#34;elasticsearch stopped&amp;#34; ;; restart) es_pid=`ps aux|grep elasticsearch | grep -v &amp;#39;grep elasticsearch&amp;#39; | awk &amp;#39;{print $2}&amp;#39;` kill -9 $es_pid echo &amp;#34;elasticsearch stopped&amp;#34; su es&amp;lt;&amp;lt;!</description></item><item><title>查看Java安装路径</title><link>https://linkall.pub/blog/find-java-install-path/</link><pubDate>Thu, 22 Oct 2020 11:12:55 +0000</pubDate><guid>https://linkall.pub/blog/find-java-install-path/</guid><description>CentOS [root@ai-python ~]# which java /usr/bin/java [root@ai-python ~]# ll -a /usr/bin/java lrwxrwxrwx. 1 root root 22 10月 20 09:35 /usr/bin/java -&amp;gt; /etc/alternatives/java [root@ai-python ~]# ll -a /etc/alternatives/java lrwxrwxrwx. 1 root root 41 10月 20 09:35 /etc/alternatives/java -&amp;gt; /usr/java/jdk1.8.0_191-amd64/jre/bin/java MacOS $ /usr/libexec/java_home -V Matching Java Virtual Machines (3): 1.8.271.09 (x86_64) &amp;#34;Oracle Corporation&amp;#34; - &amp;#34;Java&amp;#34; /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home 1.8.0_271 (x86_64) &amp;#34;Oracle Corporation&amp;#34; - &amp;#34;Java SE 8&amp;#34; /Library/Java/JavaVirtualMachines/jdk1.8.0_271.jdk/Contents/Home 1.8.0_261 (x86_64) &amp;#34;Oracle Corporation&amp;#34; - &amp;#34;Java SE 8&amp;#34; /Library/Java/JavaVirtualMachines/jdk1.</description></item><item><title>Centos7 安装 Python3.8</title><link>https://linkall.pub/blog/centos-install-python3/</link><pubDate>Mon, 12 Oct 2020 16:33:26 +0000</pubDate><guid>https://linkall.pub/blog/centos-install-python3/</guid><description>目录TOC
Step 1 – 安装前准备 可以切换到阿里云yum源：
sudo yum -y update 必备包
sudo yum -y install wget yum-utils gcc openssl-devel bzip2-devel libffi-devel zlib zlib-devel Step 2 – 源码下载编译 cd /tmp/ wget https://www.python.org/ftp/python/3.8.6/Python-3.8.6.tgz tar xzf Python-3.8.6.tgz cd Python-3.8.6 sudo ./configure --prefix=/opt/python38 --enable-optimizations --with-lto --with-system-ffi --with-computed-gotos --enable-loadable-sqlite-extensions sudo make -j &amp;#34;$(nproc)&amp;#34; sudo make altinstall 如果提示：
/usr/local/bin/python: can&amp;#39;t decompress data; zlib not available 安装目录/Modules/Setup ，将#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz的注释去掉。
Step 3 - 安装后操作 sudo ln -s /opt/python38/bin/python3.</description></item><item><title>CentOS 安装 Jupyter Notebook</title><link>https://linkall.pub/blog/centos-install-jupyter-notebook/</link><pubDate>Mon, 12 Oct 2020 16:31:40 +0000</pubDate><guid>https://linkall.pub/blog/centos-install-jupyter-notebook/</guid><description>目录[toc]
安装依赖 yum -y groupinstall &amp;#34;Development Tools&amp;#34; yum -y install python-devel 使用虚拟环境 pip install virtualenv virtualenv pyenv source pyenv/bin/activate Jupyter 安装 &amp;amp; 配置 安装 pip install jupyter 目录准备 我们先为 Jupyter 相关文件准备一个目录：
mkdir /data/jupytercd /data/jupyter 再建立一个目录作为 Jupyter 运行的根目录：
mkdir /data/jupyter/root 密码准备 执行以下命令:
Python2.x
python -c &amp;#34;import IPython;print IPython.lib.passwd()&amp;#34; Python3.x
python -c &amp;#34;import IPython;print(IPython.lib.passwd())&amp;#34; 生成配置 jupyter notebook --generate-config --allow-root 修改配置 vi /root/.jupyter/jupyter_notebook_config.py 增加如下配置
c.NotebookApp.allow_root = True c.NotebookApp.open_browser = False c.NotebookApp.port = 8888 c.</description></item><item><title>CentOS7使用阿里yum源</title><link>https://linkall.pub/blog/centos-use-aliyun-yum-source/</link><pubDate>Mon, 12 Oct 2020 16:31:14 +0000</pubDate><guid>https://linkall.pub/blog/centos-use-aliyun-yum-source/</guid><description>目录 [toc]
禁用 yum插件 fastestmirror 修改插件的配置文件 cp /etc/yum/pluginconf.d/fastestmirror.conf /etc/yum/pluginconf.d/fastestmirror.conf.bak vi /etc/yum/pluginconf.d/fastestmirror.conf enabled = 1由1改为0，禁用该插件
修改yum的配置文件 cp /etc/yum.conf /etc/yum.conf.bak vi /etc/yum.conf plugins=1改为0，不使用插件
获取阿里云 repo cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo cp /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.bak wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo 清理缓存，重建缓存 yum clean all yum makecache 完工。</description></item><item><title>Uni app 页面&amp;组件生命周期</title><link>https://linkall.pub/blog/uniapp-life-cycle/</link><pubDate>Fri, 18 Sep 2020 16:42:12 +0000</pubDate><guid>https://linkall.pub/blog/uniapp-life-cycle/</guid><description>页面的生命周期 onLoad 监听页面加载，其参数为上个页面传递的数据，参数类型为object（用于页面传参），参考示例 onShow 监听页面显示 onReady 监听页面初次渲染完成 onHide 监听页面隐藏 onUnload 监听页面卸载 onPullDownRefresh 监听用户下拉动作 onReachBottom 页面上拉触底事件的处理函数 onShareAppMessage 用户点击右上角分享 微信小程序 onPageScroll 监听页面滚动 onTabItemTap 当前是 tab 页时，点击 tab 时触发。 组件的生命周期 beforeCreate：组件初始化，但数据原生观测、自定义观测(event\watcher)没生成之前。 未完全创建阶段 created：组件创建后，但还未挂载 完全创建阶段 beforeMount：组件渲染后，挂载前。 渲染后待挂载 mounted： 组件挂载到页面 可用 vm.$el 访问 挂载OK beforeUpdate： 虚拟 DOM 重新渲染和打补丁之前 再次渲染前 updated ： 组件 DOM 已经更新 再次渲染后 activated： keep-alive 组件激活时调用。 当前组件被激活：显示 deactivated： keep-alive 组件停用时调用。 当前组件隐藏 beforeDestroy： 实例销毁之前调用。实例仍然完全可用。 销毁前 destroy： Vue 实例销毁后调用 补充： 挂载阶段，先渲染组件，然后挂载组件。</description></item><item><title>@ConditionalOnProperty来控制Configuration是否生效</title><link>https://linkall.pub/blog/conditionalonproperty-base-usage/</link><pubDate>Tue, 11 Aug 2020 09:34:31 +0000</pubDate><guid>https://linkall.pub/blog/conditionalonproperty-base-usage/</guid><description>注解解释 @Retention(RetentionPolicy.RUNTIME) @Target({ ElementType.TYPE, ElementType.METHOD }) @Documented @Conditional(OnPropertyCondition.class) public @interface ConditionalOnProperty { String[] value() default {}; //数组，获取对应property名称的值，与name不可同时使用 String prefix() default &amp;#34;&amp;#34;;//property名称的前缀，可有可无 String[] name() default {};//数组，property完整名称或部分名称（可与prefix组合使用，组成完整的property名称），与value不可同时使用 String havingValue() default &amp;#34;&amp;#34;;//可与name组合使用，比较获取到的属性值与havingValue给定的值是否相同，相同才加载配置 boolean matchIfMissing() default false;//缺少该property时是否可以加载。如果为true，没有该property也会正常加载；反之报错 boolean relaxedNames() default true;//是指命名方式 支持驼峰横线方式兼容 } } 使用 @Configuration //在application.properties配置&amp;#34;mf.assert&amp;#34;，对应的值为true @ConditionalOnProperty(prefix=&amp;#34;mf&amp;#34;,name = &amp;#34;assert&amp;#34;, havingValue = &amp;#34;true&amp;#34;) public class AssertConfig { @Autowired private HelloServiceProperties helloServiceProperties; @Bean public HelloService helloService(){ HelloService helloService = new HelloService(); helloService.setMsg(helloServiceProperties.getMsg()); return helloService; } }</description></item><item><title>redis主从设置</title><link>https://linkall.pub/blog/redis-master-slave-replicate/</link><pubDate>Mon, 10 Aug 2020 11:26:00 +0000</pubDate><guid>https://linkall.pub/blog/redis-master-slave-replicate/</guid><description>预备知识： redis安装 配置 ##Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程 daemonize no ##当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定 pidfile /var/run/redis.pid ##指定Redis监听端口，默认端口为6379 port 6379 # TCP接收队列长度，受/proc/sys/net/core/somaxconn和tcp_max_syn_backlog这两个内核参数的影响 tcp-backlog 511 ##绑定的主机地址 bind 127.0.0.1 ##当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能 timeout 300 # 如果非零，则设置SO_KEEPALIVE选项来向空闲连接的客户端发送ACK,用来定时向client发送tcp_ack包来探测client是否存活的 tcp-keepalive 60 ##指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose ## debug （大量信息，对开发/测试有用） ## verbose （很多精简的有用信息，但是不像debug等级那么多） ## notice （适量的信息，基本上是你生产环境中需要的） ## warning （只有很重要/严重的信息会记录下来） loglevel verbose ##日志名 logfile &amp;#34;./redis7003.log&amp;#34; ##设置数据库的数量，可以使用SELECT &amp;lt;dbid&amp;gt;命令在连接上指定数据库id databases 16 ##持久化rdb文件，指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt; #Redis默认配置文件中提供了三个条件： save 900 1 save 300 10 save 60 10000 分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。 # 默认如果开启RDB快照(至少一条save指令)并且最新的后台保存失败，Redis将会停止接受写操作 # 这将使用户知道数据没有正确的持久化到硬盘，否则可能没人注意到并且造成一些灾难 stop-writes-on-bgsave-error yes ##指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大 rdbcompression yes ###指定本地数据库文件名，默认值为dump.</description></item><item><title>redis哨兵机制</title><link>https://linkall.pub/blog/redis-sentinel-setting/</link><pubDate>Fri, 31 Jul 2020 17:14:56 +0000</pubDate><guid>https://linkall.pub/blog/redis-sentinel-setting/</guid><description>背景 我司使用仅有两台redis实例，所以不太适合做redis群集，比较适合使用redis哨兵机制。
原理 监控master故障时，使用投票机制（sdown，odown），判定是否故障，移除；选举新的slave作为master节点。redis.conf会随之变化。
哨兵机制关键配置 # 哨兵sentinel监控的redis主节点的 ip port # sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;ip&amp;gt; &amp;lt;redis-port&amp;gt; &amp;lt;quorum&amp;gt; sentinel monitor mymaster 172.16.8.206 6379 1 # Default is 3 minutes. 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒。 sentinel down-after-milliseconds mymaster 3000 启动 ./redis-sentinel sentinel.conf 注意 启动顺序：master-&amp;gt;slave-&amp;gt;sentinel master如果down掉，再启动不会他的角色是slave</description></item><item><title>redis 5.x安装</title><link>https://linkall.pub/blog/redis-5-install/</link><pubDate>Fri, 31 Jul 2020 14:57:13 +0000</pubDate><guid>https://linkall.pub/blog/redis-5-install/</guid><description>下载地址：
https://redis.io/download 安装环境：
yum install -y gcc 编译安装
make distclean &amp;amp;&amp;amp; make 修改配置
vi redis.conf 运行
src/redis-server redis.conf</description></item><item><title>zuul 自定义负载策略</title><link>https://linkall.pub/blog/zuul-ribbon-irule/</link><pubDate>Mon, 27 Jul 2020 22:21:48 +0000</pubDate><guid>https://linkall.pub/blog/zuul-ribbon-irule/</guid><description>定制IRule 使前后端开发可定制匹配, 学习并配置了网关的负载策略，zuul 底层使用的是 ribbon 的负载组件, ribbon 可以从 eureka 获取服务列表, 所以想要自定义负载, 得从 ribbon 入手, 查看并搜索 loadBalance 相关的类, 可以看到 AbstractLoadBalancerRule 这个类, 查看类树, 可以看到顶级接口为 IRule
/** * 决定最终的服务提供者 */ public Server choose(Object key); /** * 设置负载均衡器 */ public void setLoadBalancer(ILoadBalancer lb); /** * 拿到负载均衡器 */ public ILoadBalancer getLoadBalancer(); debug 分析, 得知 ribbon 默认的负载策略为: ZoneAvoidanceRule, 这个类继承自 AbstractLoadBalancerRule, AbstractLoadBalancerRule中存在 ILoadBalancer 属性, 可以获取负载器, 负载器中又可以获取服务列表等信息
所以我们只需要继承ZoneAvoidanceRule, 重写 choose 方法即可
ribbon 默认的负载器为: DynamicServerListLoadBalancer, 其中包括节点健康状态服务支持, 节点状态的更新(ServerListUpdater), 负载策略, 可用区域的分析, 可以从此类详细了解 ribbon 的运行机制</description></item><item><title>nacos 配置中心的使用</title><link>https://linkall.pub/blog/nacos-config-usage/</link><pubDate>Thu, 16 Jul 2020 19:44:53 +0000</pubDate><guid>https://linkall.pub/blog/nacos-config-usage/</guid><description>pom配置 在根pom.xml中设置
&amp;lt;dependencyManagement&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-alibaba-dependencies&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.2.1.RELEASE&amp;lt;/version&amp;gt; &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt; &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/dependencyManagement&amp;gt; 在项目中增加依赖：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-alibaba-nacos-config&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 设置配置 Nacos Config 使用 DataId 和 GROUP 确定一个配置。 Data ID: nacos-config.properties Group : DEFAULT_GROUP 配置格式: Properties 配置内容： user.name=nacos-config-properties user.age=90 DataId 默认取 application-name，Group默认：default_group，类型后缀默认：*.properties 使用 增加bootstrap.propertie，配置文件来配置 Nacos Server 地址
spring.application.name=base-provider spring.cloud.nacos.config.server-addr=peer1:8848,peer2:8848,peer3:8848 logging.level.com.alibaba.nacos.client.naming=error logging.level.com.alibaba.nacos.config.log.level=error logging.level.com.alibaba.nacos.naming.log.level=error # 可以使用 spring.cloud.nacos.config.file-extension=yaml 这里我们使用 @Value 注解来将对应的配置注入到 HeartController 的 userName 和 age 字段，并添加 @RefreshScope 打开动态刷新功能
使用方法一： @RequestMapping(&amp;#34;/heart&amp;#34;) @RefreshScope @RestController public class HeartController { @Value(&amp;#34;${server.</description></item><item><title>支付宝api，可以用于做IPhone的快捷操作</title><link>https://linkall.pub/blog/alipay-shortcuts/</link><pubDate>Mon, 13 Jul 2020 10:22:53 +0000</pubDate><guid>https://linkall.pub/blog/alipay-shortcuts/</guid><description>打开支付宝里面的搜索： alipayqr://platformapi/startapp?saId=20001003
支付宝收款码: alipayqr://platformapi/startapp?saId=20000123
支付宝扫一扫：alipayqr://platformapi/startapp?saId=10000007
支付宝付款：alipay://platformapi/startapp?appId=20000056
支付宝记账：alipay://platformapi/startapp?appId=20000168
支付宝滴滴：alipay://platformapi/startapp?appId=20000778
支付宝蚂蚁森林：alipay://platformapi/startapp?appId=60000002
支付宝转账：alipayqr://platformapi/startapp?saId=20000116
支付宝手机充值：alipayqr://platformapi/startapp?saId=10000003
支付宝卡包：alipayqr://platformapi/startapp?saId=20000021
支付宝吱口令：alipayqr://platformapi/startapp?saId=20000085
支付宝芝麻信用：alipayqr://platformapi/startapp?saId=20000118
支付宝红包：alipayqr://platformapi/startapp?saId=88886666
支付宝爱心：alipayqr://platformapi/startapp?saId=1000009
支付宝升级页面：alipayqr://platformapi/startapp?saId=2000066
支付宝滴滴打的：alipayqr://platformapi/startapp?saId=2000130
支付宝客服：alipayqr://platformapi/startapp?saId=2000691
支付宝生活：alipayqr://platformapi/startapp?saId=2000193
支付宝生活号：alipayqr://platformapi/startapp?saId=2000101
支付宝记账：alipayqr://platformapi/startapp?saId=2000168
公交车乘车码：alipay://platformapi/startapp?saId=200011235
蚂蚁森林：alipay://platformapi/startapp?saId=66666674&amp;amp;clientVersion=3.7.0.0718</description></item><item><title>cdn回源是什么意思</title><link>https://linkall.pub/blog/what-is-cdn-back-address/</link><pubDate>Thu, 02 Jul 2020 13:33:28 +0000</pubDate><guid>https://linkall.pub/blog/what-is-cdn-back-address/</guid><description>cdn回源是什么意思？CDN回源包括回源地址和加速域名。常规的CDN都是回源的。
原理 即：当有用户访问某一个URL的时候，如果被解析到的那个CDN节点没有缓存响应的内容，或者是缓存已经到期，就会回源站去获取。如果没有人访问，那么CDN节点不会主动去源站拿的。
回源地址 可以使回源域名，也可以是回源IP，主要作用是CDN加速节点同步更新的一个地址；
加速域名 使用CDN服务器需要加速的一个域名，一般会将加速域名做别名解析为CDN运营商提供的域名，来做CDN加速访问。
回源域名一般是cdn领域的专业术语，通常情况下，是直接用ip进行回源的，但是如果客户源站有多个ip，并且ip地址会经常变化，对于cdn厂商来说，为了避免经常更改配置（回源ip），会采用回源域名方式进行回源，这样即使源站的ip变化了，也不影响原有的配置。
CDN本来是给网站加速的，但是有时会因为不合适的回源策略给服务器带来负担，只有选择正确的策略才能给自己的网站带来更高的访问效率。</description></item><item><title>ssh 公钥认证方式登录（免密登录）</title><link>https://linkall.pub/blog/linux-ssh-login/</link><pubDate>Wed, 01 Jul 2020 22:41:20 +0000</pubDate><guid>https://linkall.pub/blog/linux-ssh-login/</guid><description>一般情况下,我们用ssh远程登录到服务器时，要输入用户名和密码。这对经常维护系统的人来说，很麻烦。怎样才能不用密码直接登录到远程的linux/unix服务器呢？ssh公钥认证可以解决这个问题。
公钥认证，是使用一对加密字符串，一个称为公钥(public key)， 任何人都可以看到其内容，用于加密；另一个称为密钥(private key)，只有拥有者才能看到，用于解密。 通过公钥加密过的密文使用密钥可以轻松解密，但根据公钥来猜测密钥却十分困难。
服务器端 在使用公钥认证之前，先检查一下服务器的ssh配置文件/etc/ssh/sshd_config
RSAAuthentication yes # 启用 RSA 认证，默认为yes PubkeyAuthentication yes # 启用公钥认证，默认为yes 如果配置没有问题，那么你就可以进行下一步了。
例子 下面我们举个例子，比如有两台机器，客户机A与服务器B，想用ssh公钥认证方式从A机器用client用户登录到B机器的server用户，方法如下：
在客户机A上生成公钥与密钥 [client@test ~]$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/client/.ssh/id_rsa): #此处直接按回车即可 Created directory &amp;#39;/home/client/.ssh&amp;#39;. Enter passphrase (empty for no passphrase): #此处直接按回车即可 Enter same passphrase again: #此处直接按回车即可 Your identification has been saved in /home/client/.ssh/id_rsa. Your public key has been saved in /home/client/.</description></item><item><title>无法开机 ,报 不可恢复的错误：securityagent无法创建所要求的机制teamviewerauthplugin:start</title><link>https://linkall.pub/blog/teamview-uninstall/</link><pubDate>Tue, 30 Jun 2020 22:39:31 +0000</pubDate><guid>https://linkall.pub/blog/teamview-uninstall/</guid><description>Mac os 10.15 使用CleanMyMac卸载TeamViewer后不能进入系统，报securityagent无法创建所要求的机制teamviewerauthplugin:start；
修复步骤如下
1、找个U盘或移动硬盘
2、下载链接:
链接: https://pan.baidu.com/s/10k-KvYceEy3IN0WKnoxN8w 提取码: ie6h 3、将下载好的TeamViewerAuthPlugin.bundle.tar.gz 复制到U盘或移动硬盘里；
4、按住command + R 开机；
5、先使用硬盘工具，将硬盘挂载上去，加密的硬盘，挂载时会提示你输入密码，输入你开机密码；
6、退出硬盘工具，使用命令终端，进入命令操作界面（点击顶部菜单栏【实用工具】 中的 【终端】）；
7、将刚才U盘或移动硬盘上的TeamViewerAuthPlugin.bundle.tar.gz，复制到/Volumes/Macintosh\ HD/Library/Security/SecurityAgentPlugins/目录下，Macintosh\ HD指的是你硬盘名；
8、解压TeamViewerAuthPlugin.bundle.tar.gz，命令：
tar -zxvf TeamViewerAuthPlugin.bundle.tar.gz 会生成一个TeamViewerAuthPlugin.bundle目录；确认 /Volumes/Macintosh\ HD/Library/Security/SecurityAgentPlugins/TeamViewerAuthPlugin.bundle是否已经有了；
9、重启搞定</description></item><item><title>uni-app上canvas绘制图片助手，一个json就制作分享朋友圈海报</title><link>https://linkall.pub/blog/uniapp-canvas-helper/</link><pubDate>Sat, 13 Jun 2020 18:52:21 +0000</pubDate><guid>https://linkall.pub/blog/uniapp-canvas-helper/</guid><description>[TOC]
uniapp-canvas-drawer uniapp-canvas-drawer是基于 kuckboy1994 的 mp_canvas_drawer 移植的 uni-app 版本。之后同步更新。
下载地址 uniapp-canvas-drawer。
当前环境下，大家都非常需要分享到朋友圈这个功能，但是实现起来各有心酸（坑比较多），所以才有了如下的 canvas 绘图工具。
具有如下特性： 简单易用 一个 json 搞定绘制图片 功能全满足 90% 的使用场景 1、绘制文本（换行、超出内容省略号、中划线、下划线、文本加粗） 2、绘制图片 3、绘制矩形 4、保存图片 5、多图绘制 6、代码量小
体验 git clone https://github.com/quanweiwang/uniapp-canvas-drawer 想在手机上使用配置自己的 appid 即可。
使用 1、clone 到本地
git clone https://github.com/quanweiwang/uniapp-canvas-drawer 2、把 components 中的 uniapp-canvas-drawer 拷贝到自己项目下。
3、在 pages.json 使用页面注册组件
{ &amp;#34;path&amp;#34;: &amp;#34;pages/index/index&amp;#34;, &amp;#34;style&amp;#34;: { &amp;#34;navigationBarTitleText&amp;#34;: &amp;#34;uni-app&amp;#34;, &amp;#34;usingComponents&amp;#34;: { &amp;#34;canvasdrawer&amp;#34;: &amp;#34;/components/uniapp-canvas-drawer/uniapp-canvas-drawer&amp;#34; } } } 4、在页面 **.vue 文件中加入如下代码
&amp;lt;canvasdrawer painting=&amp;#34;{{painting}}&amp;#34; bind:getImage=&amp;#34;eventGetImage&amp;#34;/&amp;gt; painting 是需要传入的 json。 getImage 方法是绘图完成之后的回调函数，在 event.</description></item><item><title>java:too many open files 解决办法</title><link>https://linkall.pub/blog/too-many-open-files/</link><pubDate>Sat, 13 Jun 2020 10:43:22 +0000</pubDate><guid>https://linkall.pub/blog/too-many-open-files/</guid><description>[TOC]
产生原因 Linux 中,文件是一个字节序列。这种简单但强大的定义和它的实现使得系统中的所有东西都可以用文件来表示。这里提示的打开文件过多，不仅仅是普通的文件，也包括通讯链接socket，监听端口。这个错误通常是句柄数超出系统限制。
引起的原因就是进程在某个时刻打开了超过系统限制的文件数量以及通讯链接数。
通过命令ulimit -a可以查看当前系统设置的最大句柄数是多少： $ ulimit -a core file size (blocks, -c) 0 data seg size (kbytes, -d) unlimited scheduling priority (-e) 0 file size (blocks, -f) unlimited pending signals (-i) 15065 max locked memory (kbytes, -l) 64 max memory size (kbytes, -m) unlimited open files (-n) 1024 pipe size (512 bytes, -p) 8 POSIX message queues (bytes, -q) 819200 real-time priority (-r) 0 stack size (kbytes, -s) 8192 cpu time (seconds, -t) unlimited max user processes (-u) 15065 virtual memory (kbytes, -v) unlimited file locks (-x) unlimited open files那一行就代表系统目前允许单个进程打开的最大句柄数，这里是1024。</description></item><item><title>uniapp 使用 i18n 实现多语言切换</title><link>https://linkall.pub/blog/uniapp-multi-lang/</link><pubDate>Fri, 12 Jun 2020 15:47:21 +0000</pubDate><guid>https://linkall.pub/blog/uniapp-multi-lang/</guid><description>[TOC]
主题思想 使用vue-i18n实现国际化。官方文档
npm 安装 npm install vue-i18n --save 在 main.js 中引入
import Vue from &amp;#39;vue&amp;#39;; import App from &amp;#39;./App&amp;#39;; import VueI18n from &amp;#39;vue-i18n&amp;#39; // ★ import messages from &amp;#39;./commom/lang.js&amp;#39; // ★ Vue.use(VueI18n) // ★ Vue.config.productionTip = false; const i18n = new VueI18n({ // ★ locale: &amp;#39;zh-CN&amp;#39;, // 默认选择的语言 messages }) App.mpType = &amp;#39;app&amp;#39;; Vue.prototype._i18n = i18n // ★ const app = new Vue({ i18n, // ★ ...App }); app.$mount(); 其中改变locale的取值可以改变语言的类型，messages的内容我放到一个独立的lang.</description></item><item><title>Nginx 静态文件服务配置及优化</title><link>https://linkall.pub/blog/nginx-static-config/</link><pubDate>Thu, 11 Jun 2020 10:22:54 +0000</pubDate><guid>https://linkall.pub/blog/nginx-static-config/</guid><description>[TOC]
根目录和索引文件 root 指令指定将用于搜索文件的根目录。 为了获取所请求文件的路径，NGINX 将请求 URI 附加到 root 指令指定的路径。该指令可以放在 http {}，server {} 或 location {} 上下文中的任何级别。在下面的示例中，为虚拟服务器定义了 root 指令。 它适用于未包含根指令的所有location {} 块，以显式重新定义根：
server { root /www/data; location / { } location /images/ { } location ~ \.(mp3|mp4) { root /www/media; } } 在这里，NGINX 针对 /images/ 开头的 URI 将在文件系统的 /www/ data/images/ 目录中搜索相应文件。 如果 URI 以 .mp3 或 .mp4 扩展名结尾，则 NGINX 会在 /www/media/ 目录中搜索该文件，因为它是在匹配的位置块中定义的。
如果请求以 / 结尾，则 NGINX 将其视为对目录的请求，并尝试在目录中查找索引文件。index 指令定义索引文件的名称（默认值为 index.html）。要继续该示例，如果请求 URI 是 /images/some/path/，则 NGINX 会返回文件 /www/data/images/some/path/index.</description></item><item><title>MyBatis获取插入记录的自增长字段值</title><link>https://linkall.pub/blog/mybatis-auto-id/</link><pubDate>Tue, 02 Jun 2020 19:14:57 +0000</pubDate><guid>https://linkall.pub/blog/mybatis-auto-id/</guid><description>MyBatis Plus MyBatis plus 的insert语句，默认会给参数回加上自增主键的值。
MyBatis 再写xml时候注意，需要指定参数类型，parameterType，并加上useGeneratedKeys=&amp;quot;true&amp;quot; 和指定主键字段：keyProperty
&amp;lt;insert id=&amp;#34;insert&amp;#34; parameterType=&amp;#34;com.helloworld.User&amp;#34; &amp;lt;!--指定参数类型--&amp;gt; useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;id&amp;#34; &amp;lt;!--指定主键字段--&amp;gt; &amp;gt;</description></item><item><title>格式化并挂载数据盘</title><link>https://linkall.pub/blog/format-disk-mount-disk/</link><pubDate>Tue, 02 Jun 2020 17:57:34 +0000</pubDate><guid>https://linkall.pub/blog/format-disk-mount-disk/</guid><description>注意：
格式化后，数据盘中的数据将被全部清空。请在格式化之前，确保数据盘中没有数据或已对重要数据进行备份。为避免服务发生异常，格式化前请确保云服务器已停止对外服务。 手动格式化并挂载数据盘
请根据以下步骤格式化并挂载数据盘。
注意：
执行下述命令时，请注意修改数据盘盘符，本示例假设数据盘盘符为vdb。
步骤一：格式化数据盘 注意： 在进行分区格式化时，开发者可以自行决定文件系统的格式，如ext3、ext4等。示例采用ext4格式。
执行 mkfs 命令对数据盘进行格式化：
mkfs.ext4 /dev/vdb 步骤二：挂载数据盘 创建挂载点 data 目录：
mkdir /data 挂载新分区：
mount /dev/vdb /data 验证数据盘是否挂载成功：
df -h 出现如下信息则说明挂载成功，即 Linux 服务器已经挂载数据盘：
Filesystem Size Used Avail Use% Mounted on /dev/vdb 50G 53M 47G 1% /data 步骤三：实现开机自动挂载 添加数据盘挂载信息至/etc/fstab，实现开机自动挂载。
当您希望云服务器在重启或开机时能自动挂载数据盘，必须将数据盘挂载信息添加到/etc/fstab中。否则云服务器重启或开机后，不会自动挂载数据盘。
使用以下命令添加分区信息：
echo '/dev/vdb /data ext4 defaults 0 0' &amp;gt;&amp;gt; /etc/fstab 使用以下命令查看分区信息：
cat /etc/fstab 出现如下信息则说明添加数据盘挂载信息成功：
/dev/vdb /data ext4 defaults 0 0 自动格式化并挂载数据盘 在腾讯云的 Linux 服务器上，您可以通过运行以下 Shell 脚本来实现自动格式化和挂载数据盘：</description></item><item><title>Apache Maven Source Plugin-Maven打包源码到私服</title><link>https://linkall.pub/blog/apache-maven-source-plugin-usage/</link><pubDate>Tue, 02 Jun 2020 14:57:55 +0000</pubDate><guid>https://linkall.pub/blog/apache-maven-source-plugin-usage/</guid><description>使用插件Apache Maven Source Plugin 官网说明：https://maven.apache.org/plugins/maven-source-plugin/index.html
Goals Overview source:jar 是默认的。 The Source Plugin has five goals:
source:aggregate aggregrates sources for all modules in an aggregator project. source:jar is used to bundle the main sources of the project into a jar archive. source:test-jar on the other hand, is used to bundle the test sources of the project into a jar archive. source:jar-no-fork is similar to jar but does not fork the build lifecycle.</description></item><item><title>各个系统查看端口情况的方法</title><link>https://linkall.pub/blog/check-port/</link><pubDate>Tue, 02 Jun 2020 11:56:08 +0000</pubDate><guid>https://linkall.pub/blog/check-port/</guid><description>查看本机占用情况 windows windows常用命令netstat，与find组合使用
netsat -an | find &amp;#34;8080&amp;#34; mac lsof -i 8090 linux netstat -anptl | grep 8080 查看远程端口是否开启 nc nc -v -n 127.0.0.1 22 wget wget 192.168.1.1:6379 curl curl 192.168.1.1:6379</description></item><item><title>Mysql5.7主从复制</title><link>https://linkall.pub/blog/mysql-master-slave/</link><pubDate>Tue, 02 Jun 2020 11:09:54 +0000</pubDate><guid>https://linkall.pub/blog/mysql-master-slave/</guid><description>环境 Linux:CentOS7 Mysql:5.7 服务器:腾讯云
安装 见：https://blog.csdn.net/haxyek/article/details/85273553 安装后可能需要的初始化命令：
mysqld --initialize-insecure --user=mysql --explicit_defaults_for_timestamp 主从复制原理 从服务器读取主服务器的binlog，进行数据复制。
主从复制实践 主服务器配置： 第一步：修改my.cnf文件 [mysqld]段增加
#启动而进制日志 log-bin=mysql-bin #服务器唯一ID，一般取IP最后一段 server-id=83 第二步：重启mysql服务 systemctl restart mysqld 第三步：主机给从机授权备份权限 登录到主机的mysql
myysql&amp;gt; GRANT REPLication slave on *.* to &amp;#39;从机用户名&amp;#39;@&amp;#39;从机ip地址&amp;#39; identified by &amp;#39;从机密码&amp;#39;; 示例
myysql&amp;gt; GRANT REPLication slave on *.* to &amp;#39;slave&amp;#39;@&amp;#39;172.32.1.16&amp;#39; identified by &amp;#39;slave_password&amp;#39;; 第四步：刷新权限 mysql&amp;gt;flush privileges; 第五步：查询master的状态 mysql&amp;gt;show master status; +------------------+----------+--------------+------------------+-------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | +------------------+----------+--------------+------------------+-------------------+ | mysql-bin.</description></item><item><title>Mysql 数据库名、表名大小写</title><link>https://linkall.pub/blog/mysql-dbname-tablename/</link><pubDate>Tue, 02 Jun 2020 01:44:03 +0000</pubDate><guid>https://linkall.pub/blog/mysql-dbname-tablename/</guid><description>[mysqld] lower-case-table-names=0 ** windows默认为0，unix默认为1； **
变量lower-case-table-names的取值 取值范围有三个，分别是0、1、2.
设置成0：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时大小写敏感。 设置成1：表名转小写后存储到硬盘，比较时大小写不敏感。 设置成2：表名按你写的SQL大小写存储，大写就大写小写就小写，比较时统一转小写比较。 这个选项不仅仅适用于表名的大小写敏感，同样适用于数据库名和表别名。</description></item><item><title>IDEA开启 Run DashBoard</title><link>https://linkall.pub/blog/run-dashboard/</link><pubDate>Mon, 01 Jun 2020 23:59:54 +0000</pubDate><guid>https://linkall.pub/blog/run-dashboard/</guid><description>打开项目内的.idea\workspace.xml，查找RunDashboard。如果不存在，则新建component节点：
&amp;lt;component name=&amp;#34;RunDashboard&amp;#34;&amp;gt; &amp;lt;option name=&amp;#34;configurationTypes&amp;#34;&amp;gt; &amp;lt;set&amp;gt; &amp;lt;option value=&amp;#34;SpringBootApplicationConfigurationType&amp;#34; /&amp;gt; &amp;lt;/set&amp;gt; &amp;lt;/option&amp;gt; &amp;lt;option name=&amp;#34;ruleStates&amp;#34;&amp;gt; &amp;lt;list&amp;gt; &amp;lt;RuleState&amp;gt; &amp;lt;option name=&amp;#34;name&amp;#34; value=&amp;#34;ConfigurationTypeDashboardGroupingRule&amp;#34; /&amp;gt; &amp;lt;/RuleState&amp;gt; &amp;lt;RuleState&amp;gt; &amp;lt;option name=&amp;#34;name&amp;#34; value=&amp;#34;StatusDashboardGroupingRule&amp;#34; /&amp;gt; &amp;lt;/RuleState&amp;gt; &amp;lt;/list&amp;gt; &amp;lt;/option&amp;gt; 如果存在，则在节点内增加：
&amp;lt;option name=&amp;#34;configurationTypes&amp;#34;&amp;gt; &amp;lt;set&amp;gt; &amp;lt;option value=&amp;#34;SpringBootApplicationConfigurationType&amp;#34; /&amp;gt; &amp;lt;/set&amp;gt; &amp;lt;/option&amp;gt; 保存即可。</description></item><item><title>Springboot 指定profile配置文件</title><link>https://linkall.pub/blog/springboot-profile-config/</link><pubDate>Mon, 01 Jun 2020 21:48:38 +0000</pubDate><guid>https://linkall.pub/blog/springboot-profile-config/</guid><description>Maven启动指定Profile通过-P，如mvn spring-boot:run -Ptest，但这是Maven的Profile。
如果要指定spring-boot的spring.profiles.active，则必须使用mvn spring-boot:run -Drun.profiles=test
如果使用命令行直接运行jar文件，则使用java -jar -Dspring.profiles.active=test demo-0.0.1-SNAPSHOT.jar
注意：-Dspring.profiles.active=test的位置。
如果使用开发工具，运行Application.java文件启动，则增加参数&amp;ndash;spring.profiles.active=test</description></item><item><title>mysql bin-log 误操作数据修复</title><link>https://linkall.pub/blog/mysql-bin-log-reverse/</link><pubDate>Mon, 01 Jun 2020 18:25:23 +0000</pubDate><guid>https://linkall.pub/blog/mysql-bin-log-reverse/</guid><description>先说原理 基于全量备份，加bin-log，将数据恢复到误操作之前节点数据，然后跳过误操作，执行后面操作。使用binlog文件转成sql执行，导入到数据库。
查看binlog文件 如果有多个binlog日志也可以在Mysql命令行下查看当前binlog、切割binlog日志。切割完成binlog再次查看就会看到新的日志写入到新的binlog文件中。
mysql&amp;gt; show master status; +------------------+-----------+--------------+------------------+-------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | +------------------+-----------+--------------+------------------+-------------------+ | mysql-bin.000001 | 343629748 | | | | +------------------+-----------+--------------+------------------+-------------------+ 1 row in set (0.00 sec) mysql&amp;gt; flush logs; Query OK, 0 rows affected (0.01 sec) 找到binlog中错误的语句 使用mysqlbinlog命令加参数，可以指定时间段，和pos节点：
--start-position 起始点 --stop-position 结束点（不包含） --start-datetime=“2017--11-01 00:00:00” 起始时间 --stop-datetime=&amp;#34;2017-11-11 00:00:00&amp;#34; 终止时间 -d db_name 指定数据库 -v 是显示出一些sql的信息 -vv 则是多一些注释性的东西 --base64-output=DECODE-ROWS 这个是把sql解码出来 可以binlog日志中找到错误语句执行的时间点，分别恢复错误语句前后的binlog日志为sql。也可以跳过此步，直接恢复整个binlog日志为sql，然后打开sql文件，删除错误语句。
可以根据时间点来确定误操作的确切时间 mysqlbinlog --no-defaults --database=order --start-datetime=&amp;#39;2019-11-02 3:08&amp;#39; --stop-datetime=&amp;#39;2019-11-02 23:08&amp;#39; --base64-output=DECODE-ROWS mysql-bin.</description></item><item><title>MySQL初始化基础配置</title><link>https://linkall.pub/blog/mysql-base-config/</link><pubDate>Mon, 01 Jun 2020 05:44:28 +0000</pubDate><guid>https://linkall.pub/blog/mysql-base-config/</guid><description>CentOS7安装Mysql5.7 https://75051685.xyz/archives/centos7-install-mysql
修改编码：/etc/my.cnf
[client] default-character-set = utf8 [mysqld] default-storage-engine = INNODB character-set-server = utf8 collation-server = utf8_general_ci # 不区分大小写 collation-server = utf8_bin # 区分大小写 collation-server = utf8_unicode_ci # 比 utf8_general_ci 更准确 lower_case_table_names=2 # 表名区分大小写 max_connections=1000 # 最大连接数 创建数据库和用户 # 创建数据库，编码utf8 CREATE DATABASE &amp;lt;datebasename&amp;gt; CHARACTER SET utf8; # 创建用户，指定用户名，密码，访问主机 CREATE USER &amp;#39;username&amp;#39;@&amp;#39;host&amp;#39; IDENTIFIED BY &amp;#39;password&amp;#39;; # 设置权限 GRANT privileges ON databasename.tablename TO &amp;#39;username&amp;#39;@&amp;#39;host&amp;#39;; # 显示权限 SHOW GRANTS FOR &amp;#39;username&amp;#39;@&amp;#39;host&amp;#39;; # 回收用户权限 REVOKE privilege ON databasename.</description></item><item><title>一步一步CentOS7 安装 MySQL5.7</title><link>https://linkall.pub/blog/centos7-install-mysql/</link><pubDate>Mon, 01 Jun 2020 01:40:01 +0000</pubDate><guid>https://linkall.pub/blog/centos7-install-mysql/</guid><description>说明： 此文章用于安装Oracle Mysql，而非MariaDB。
yum源处理 对于yum安装，需要知道yum源，参考官网信息即可：
https://dev.mysql.com/downloads/repo/yum/
同时贴出apt源：
https://dev.mysql.com/downloads/repo/apt/
选择下载，本文贴出两个地址一个是5.7，一个是8.0：
# 5.7 https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm # 8.0 最新版本（2018-12-27） https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm 根据两个地址的对比，其他版本链接请自行揣测。下载完后进行安装：
# 安装rpm包 sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm # 查看yum yum repolist all | grep mysql # 显示结果 mysql-connectors-community/x86_64 MySQL Connectors Community mysql-tools-community/x86_64 MySQL Tools Community mysql57-community/x86_64 MySQL 5.7 Community Server 安装 sudo yum install mysql-community-server 启动 MySQL 服务 Mysql5.7版本默认设置了临时密码，需要在启动之后查看运行日志，里面会有临时密码显示：
sudo cat /var/log/mysqld.log | grep &amp;#39;temporary password&amp;#39; 修改密码 $ mysql -uroot -p #输入查看到的密码 # 新密码要求符合密码规范。大小写，特殊字符数字等。 mysql&amp;gt; ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;!</description></item><item><title>nginx 80端口重定向到443端口</title><link>https://linkall.pub/blog/nginx-redirect-80-to-443/</link><pubDate>Sun, 31 May 2020 18:34:29 +0000</pubDate><guid>https://linkall.pub/blog/nginx-redirect-80-to-443/</guid><description>使用如下配置即可
server { listen 80; server_name www.test.com; rewrite ^(.*)$ https://${server_name}$1 permanent; }</description></item><item><title>php-fpm 报错500排查</title><link>https://linkall.pub/blog/how-to-debug-php-fpm-500/</link><pubDate>Sun, 31 May 2020 18:33:22 +0000</pubDate><guid>https://linkall.pub/blog/how-to-debug-php-fpm-500/</guid><description>TOC
php-fpm 报错500 php-fpm报错500，使用nginx转发，同时有没有日志。
思路将错误暴露出来：
使用phpinfo将php.ini的路径找出 新建一个页面，内容如下：
&amp;lt;?php phpinfo(); ?&amp;gt; 找到php.ini的位置：
/usr/local/php/etc/php.ini 编辑php.ini 查找 display_errors，将配置改为On，即为显示错误。
display_errors = On 记得处理好问题后改回去。</description></item><item><title>使用general_log来对Mysql SQL语句监控查看的记录</title><link>https://linkall.pub/blog/mysql-sql-monitor/</link><pubDate>Sun, 31 May 2020 18:27:22 +0000</pubDate><guid>https://linkall.pub/blog/mysql-sql-monitor/</guid><description>查看日志位置：
show global variables like '%general%'; +——————+———-+ |Variable_name|Value| +——————+———-+ |general_log|OFF| |general_log_file|/data0/logs/mysql/general.log| +——————+———-+ 设置 SET GLOBAL general_log = 'ON';
使用tail -f 日志位置 查看即时日志。
临时开启日志记录
set global general_log='ON'; 这时执行的所有sql都会被记录下来，但是如果重启mysql就会停止记录需要重新设置
查看日志
tail -f /data0/logs/mysql/general.log 查看全部
cat /data0/logs/mysql/general.log 查看是否开启binlog
show variables like “log_bin” ; 查看当前的binlog日志
show master status ;</description></item><item><title>CentOS7修改服务器ssh端口号</title><link>https://linkall.pub/blog/centos7-sshd-port/</link><pubDate>Sun, 31 May 2020 18:11:45 +0000</pubDate><guid>https://linkall.pub/blog/centos7-sshd-port/</guid><description>版本 CentOS7
一般情况 编辑sshd的配置文件，增加端口既可
vi /etc/ssh/sshd_config ---- Port 22 Port 1022 然后重启服务
systemctl status sshd.service 开启了SELinux策略 如果开启了SELinux策略，则可以使用下面命令查看端口状态：
semanage port -l | grep ssh 增加访问端口
semanage port -a -t ssh_port_t -p tcp 1022 防火墙配置 firewall-cmd --list-all firewall-cmd --zone=public --add-port=1022/tcp --permanent firewall-cmd --reload</description></item><item><title>MAVEN发布项目到私服，镜像</title><link>https://linkall.pub/blog/maven-respoistory/</link><pubDate>Sun, 31 May 2020 17:51:24 +0000</pubDate><guid>https://linkall.pub/blog/maven-respoistory/</guid><description>snapshot和release的区别 snapshot快照库，开发过程中随时发布，无需更改版本号，适用不稳定的开发阶段 release，版本稳定后，可以发布到此库。 快照版本后缀-SNAPSHOT，发布到不同的库完全是依靠版本号确定，程序自动判断。 快照版本示例
&amp;lt;groupId&amp;gt;com.alexdev&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mm&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; 发布到私服 一般私服使用Nexus SSO搭建。在官网下载安装包安装即可（ https://www.sonatype.com/nexus-repository-oss ）。目前版本：Nexus Repository Manager OSS 3.x （2019-01-08） 默认密码：admin/admin123 安装完后设置maven的setting文件：
&amp;lt;server&amp;gt; &amp;lt;id&amp;gt;releases&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;admin123&amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;snapshots&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;admin123&amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; 在如上配置设置了两个账户密码，这个账户密码是nexus的账户密码，如需新建，请与之对应。 之后设置项目的pom文件，注意id和settting.xml文件中的id需相对应。代表发布到不同的代码库中的不同账户和密码。对于url地址，不同的版本可能不同。
&amp;lt;!-- 项目发布管理 --&amp;gt; &amp;lt;distributionManagement&amp;gt; &amp;lt;repository&amp;gt; &amp;lt;id&amp;gt;releases&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;User Project Release&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://192.168.1.53:8081/repository/maven-releases/&amp;lt;/url&amp;gt; &amp;lt;/repository&amp;gt; &amp;lt;snapshotRepository&amp;gt; &amp;lt;id&amp;gt;snapshots&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;User Project SNAPSHOTS&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://192.168.1.53:8081/repository/maven-snapshots/&amp;lt;/url&amp;gt; &amp;lt;/snapshotRepository&amp;gt; &amp;lt;/distributionManagement&amp;gt; 发布到私服的命令：
mvn clean deploy -X -Dmaven.test.skip=true 如果看到BUILD SUCCESS字样，既可在仓库里查看相应的包。
Tips 如果出现400，需要注意项目下的pom.xml文件和maven使用的setting.xml文件的配置是否一致。 如果出现401，需要检查maven使用的setting.xml中的帐号和密码是否正确，相应的repository是否为“Allow Redeploy”。 镜像mirror 镜像的目的是为了解决访问速度问题，个人开发可以设置国内镜像，例如阿里云提供的的，在setting.xml文件中添加
&amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt; &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.</description></item><item><title>CentOS7 firewall 开放端口和关闭防火墙</title><link>https://linkall.pub/blog/centos7-firewalld/</link><pubDate>Sun, 31 May 2020 17:30:41 +0000</pubDate><guid>https://linkall.pub/blog/centos7-firewalld/</guid><description>CentOS7开放端口，重载防火墙配置
sudo firewall-cmd --zone=public --add-port=6379/tcp --permanent sudo firewall-cmd --reload 检查防火墙规则命令
firewall-cmd --list-all 会显示：
public (active) # 状态 target: default icmp-block-inversion: no interfaces: ens33 #接口信息 sources: services: ssh dhcpv6-client #开放服务 ports: 6379/tcp # 开放端口 protocols: masquerade: no forward-ports: source-ports: icmp-blocks: rich rules: 其他命令：
# 重启防火墙 systemctl restart firewalld # 检查状态 firewall-cmd --state firewall-cmd --list-all #禁用 firewall systemctl disable firewalld systemctl stop firewalld # 查询防火墙状态 systemctl status firewalld #启用防火墙 systemctl enable firewalld systemctl start firewalld # 查询防火墙状态 systemctl status firewalld</description></item><item><title>pinpoint，HBase数据清理</title><link>https://linkall.pub/blog/pinpoint-hbase-data-clean/</link><pubDate>Fri, 29 May 2020 18:29:40 +0000</pubDate><guid>https://linkall.pub/blog/pinpoint-hbase-data-clean/</guid><description>[toc]
HBASE数据清理 pinpoint使用HBASE储存数据，对于HBase进行数据清理。
HBase shell 进入HBASE目录，执行如下命令，进入shell
bin/hbase shell 查看表信息 查看HBASE表:
hbase(main):001:0&amp;gt; list TABLE AgentEvent AgentInfo AgentLifeCycle AgentStatV2 ApiMetaData ApplicationIndex ApplicationMapStatisticsCallee_Ver2 ApplicationMapStatisticsCaller_Ver2 ApplicationMapStatisticsSelf_Ver2 ApplicationStatAggre ApplicationTraceIndex HostApplicationMap_Ver2 SqlMetaData_Ver2 StringMetaData TraceV2 15 row(s) in 0.2120 seconds 查看表描述 查看表描述，里面有个TTL值，代表数据存储时长
hbase(main):002:0&amp;gt; desc &amp;#39;AgentInfo&amp;#39; Table AgentInfo is ENABLED AgentInfo COLUMN FAMILIES DESCRIPTION { NAME =&amp;gt; &amp;#39;Info&amp;#39;, BLOOMFILTER =&amp;gt; &amp;#39;ROW&amp;#39;, VERSIONS =&amp;gt; &amp;#39;1&amp;#39;, IN_MEMORY =&amp;gt; &amp;#39;false&amp;#39;, KEEP_DELETED_CELLS =&amp;gt; &amp;#39;FALSE&amp;#39;, DATA_BLOCK_ENCODING =&amp;gt; &amp;#39;PREFIX&amp;#39;, TTL =&amp;gt; &amp;#39;31536000 SECONDS (365 DAYS)&amp;#39;, COMPRESSION =&amp;gt; &amp;#39;NONE&amp;#39;, MIN_VERSIONS =&amp;gt; &amp;#39;0&amp;#39;, BLOCKCACHE =&amp;gt; &amp;#39;true&amp;#39;, BLOCKSIZE =&amp;gt; &amp;#39;65536&amp;#39;, REPLICATION_SCOPE =&amp;gt; &amp;#39;0&amp;#39;} 1 row(s) in 0.</description></item><item><title>nginx上传文件413错误</title><link>https://linkall.pub/blog/nginx-413-configuration/</link><pubDate>Thu, 28 May 2020 01:02:50 +0000</pubDate><guid>https://linkall.pub/blog/nginx-413-configuration/</guid><description>nginx报错： 413 Request Entity Too Large 是因为请求体积太大，解决办法：更改Nginx的配置，将客户端上传最大文件体积增大，如下配置，根据自身情况设定。
client_max_body_size 20M; 以上配置可放入server、http、location指令中。
全局配置 http{ client_max_body_size 20m; } 站点配置 修改站点下location的配置
server { listen 80; server_name 75051685.xyz; location / { root html; index index.html index.htm; } } 修改为：
server { listen 80; server_name 75051685.xyz; location / { root html; index index.html index.htm; client_max_body_size 20m; } }</description></item><item><title>foobar2000播放的一些使用技巧</title><link>https://linkall.pub/blog/foobar2000-tips/</link><pubDate>Tue, 26 May 2020 18:31:03 +0000</pubDate><guid>https://linkall.pub/blog/foobar2000-tips/</guid><description>听ape音乐，cue乱码或者找不到文件，ftp无法上传的解决办法：
第一种情况，找不到文件 我用iPhone手机播放的时候，提示找不到，看了一下提示，是路径问题。将ape文件，和cue放在同一目录；同时将FILE使用相对路径，./开头加文件名即可。
PERFORMER &amp;#34;BEYOND&amp;#34; TITLE &amp;#34;BEYOND珍藏版CD2&amp;#34; FILE &amp;#34;./BEYOND.CD2.ape&amp;#34; WAVE TRACK 01 AUDIO 第二种情况，找到文件之后，播放列表是乱码 如果用记事本文件打开是正常的显示，只是放入手机中是乱码，则可以更改文件编码格式即可。推荐使用vscode，简单易用。更改编码为UTF-8 with BOM
无法上传到媒体库 对于IPhone使用foobar2000，无法上传情况实际上是foobar安装后，未有网络权限，简单的办法可以触发Foobar2000在iPhone上网络权限开关的方法如下：在Browse界面，选择Media Servers，然后Add new添加一个新的服务器，例如随便输入一个ftp服务器，比如： ftp://192.168.2.1 接下来就会弹出网络授权按钮，允许后，再去开启FTP服务，就可以通过电脑端访问Foobar2000手机版的FTP服务并且传文件到手机了。</description></item><item><title>使用Docker在内网搭建DNS服务器</title><link>https://linkall.pub/blog/docker-dnsmasq-usage/</link><pubDate>Tue, 26 May 2020 18:22:39 +0000</pubDate><guid>https://linkall.pub/blog/docker-dnsmasq-usage/</guid><description>dnsmasq 搭建web配置界面 使用jpillora提供的docker镜像。
用法 创建一个配置文件/opt/dnsmasq.conf，如下为demo
#dnsmasq config, for a complete example, see: # http://oss.segetech.com/intra/srv/dnsmasq.conf #log all dns queries log-queries #dont use hosts nameservers no-resolv #use cloudflare as default nameservers, prefer 1^4 server=1.0.0.1 server=1.1.1.1 strict-order #serve all .company queries using a specific nameserver server=/company/10.0.0.1 #explicitly define host-ip mappings address=/myhost.company/10.0.0.2 启动容器 $ docker run \ --name dnsmasq \ -d \ -p 53:53/udp \ -p 5380:8080 \ -v /opt/dnsmasq.conf:/etc/dnsmasq.conf \ --log-opt &amp;#34;max-size=100m&amp;#34; \ -e &amp;#34;HTTP_USER=foo&amp;#34; \ -e &amp;#34;HTTP_PASS=bar&amp;#34; \ --restart always \ jpillora/dnsmasq 其中： -e &amp;quot;HTTP_USER=foo&amp;quot; -e &amp;quot;HTTP_PASS=bar&amp;quot; 为为dnsmasq设定访问用户名和密码。访问地址：`</description></item><item><title>Maven查看当前生效配置、pom、环境变量等命令（mvn help用法）</title><link>https://linkall.pub/blog/maven-help-usage/</link><pubDate>Tue, 26 May 2020 18:21:06 +0000</pubDate><guid>https://linkall.pub/blog/maven-help-usage/</guid><description> 检查当前Maven环境启用的文件 mvn help:effective-settings 查看当前项目的pom配置，包括所有依赖 mvn help:effective-pom 查看当前处于激活状态的profile mvn help:active-profiles 指定使用某个配置文件执行Maven命令 mvn -s &amp;lt;filepath&amp;gt; &amp;lt;goal&amp;gt; mvn -s ~/.m2/settings_local.xml clean deploy 查看当前项目的所有mvn配置 mvn -X 打印所有可用的环境变量和Java系统属性 mvn help:system</description></item><item><title>zuul 网关上传文件大小配置</title><link>https://linkall.pub/blog/zuul-upload-config/</link><pubDate>Tue, 26 May 2020 18:20:18 +0000</pubDate><guid>https://linkall.pub/blog/zuul-upload-config/</guid><description>关于版本先看pom配置 &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.2.RELEASE&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt; &amp;lt;spring-cloud.version&amp;gt;Greenwich.RELEASE&amp;lt;/spring-cloud.version&amp;gt; &amp;lt;/properties&amp;gt; ------- &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-zuul&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 文件大小设置 spring: application: name: dragon-zuul servlet: # 此版本的节点为servlet，不是http 注意一下 multipart: enabled: true # 启用上传处理，默认是true file-size-threshold: 1MB # 当上传文件达到1MB的时候进行磁盘写入 max-request-size: 10MB # 设置最大的请求文件的大小 max-file-size: 10MB # 设置单个文件的最大长度</description></item><item><title>使用mysqldump导出mysql表结构和表数据</title><link>https://linkall.pub/blog/mysql-dump-usage/</link><pubDate>Mon, 25 May 2020 18:19:28 +0000</pubDate><guid>https://linkall.pub/blog/mysql-dump-usage/</guid><description>创建备份用户 create user dumper@&amp;#39;127.0.0.1&amp;#39; identified by &amp;#39;12345678&amp;#39;; 赋权限 grant select on *.* to dumper@&amp;#39;127.0.0.1&amp;#39;; grant lock tables on *.* to dumper@&amp;#39;127.0.0.1&amp;#39;; 备份脚本 #!/bin/bash mkdir /tmp/`date +%y%m%d` mysqldump -h127.0.0.1 -u dumper -p12345678 dbname &amp;gt; /tmp/`date +%y%m%d`/db.sql crontab定时任务 凌晨三点执行脚本。
0 3 * * * /opt/software/backup_db.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 MySQL 备份包含 emoji 表情的数据 在执行备份命令时，指定字符集即可（@see mysqldump &amp;ndash;help）
$ mysqldump -uroot -p123456 --default-character-set=utf8mb4 db_name &amp;gt; db_name_bak.sql 常见用法 命令行下具体用法如下：
mysqldump -u用戶名 -p密码 -d 数据库名 表名 &amp;gt; 脚本名; 导出整个数据库结构和数据</description></item><item><title>CentOS7 重置root密码</title><link>https://linkall.pub/blog/centos7-reset-root-password/</link><pubDate>Sun, 24 May 2020 18:15:34 +0000</pubDate><guid>https://linkall.pub/blog/centos7-reset-root-password/</guid><description>1 - 在启动grub菜单，选择编辑选项启动 2 - 按键盘e键，来进入编辑界面 3 - 找到Linux 16的那一行，将ro改为rw init=/sysroot/bin/sh 4 - 现在按下 Control+x，使用单用户模式启动 5 - 现在，可以使用下面的命令访问系统 chroot /sysroot
6 - 重置密码 passwd root
7 - 更新系统信息 touch /.autorelabel
8 - 退出chroot exit
9 - 重启你的系统 reboot</description></item><item><title>如何用Mac线刷小米手机</title><link>https://linkall.pub/blog/mi-phone-fastboot/</link><pubDate>Fri, 22 May 2020 18:26:04 +0000</pubDate><guid>https://linkall.pub/blog/mi-phone-fastboot/</guid><description>目录 TOC
ROM下载地址 对于老款小米，需要使用低版本的ROM才不会卡，这里提供两个ROM历史下载地址，都为非官方的，因为官方的不全。
https://miuiver.com/ https://roms.miuier.com/ mac刷机工具 adb 安装
brew cask install android-platform-tools 安装好后配置一下环境变量。 在/etc/profile中加入。
export PATH=~/android-sdks/platform-tools:~/android-sdks/tools:$PATH 运行fastboot --version检测是否成功安装并配置好环境。
开始刷机 打开手机调试模式，并手机连接到电脑 进入fastboot模式： 手机已开机使用：adb reboot bootloader 没有开机：开机键+音量下长按 查看当前手机设备名： $ fastboot devices 4e46d6ca fastboot 4e46d6ca为当前设备名 4. 控制台进入到解压后的目录： 运行脚本：
~/Downloads/kenzo_images_V7.5.2.0.LHOCNDE_20160629.0000.25_5.1_cn ⌚ 14:13:59 $ sh flash_all.sh -s 4e46d6ca tips 实验机器：红米Note3全网通，刷的ROM kenzo_images_V7.5.2.0</description></item><item><title>MySQL查看数据库表容量大小</title><link>https://linkall.pub/blog/mysql-view-database-table-capacity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linkall.pub/blog/mysql-view-database-table-capacity/</guid><description>1.查看所有数据库容量大小 select table_schema as &amp;#39;数据库&amp;#39;, sum(table_rows) as &amp;#39;记录数&amp;#39;, sum(truncate(data_length / 1024 / 1024, 2)) as &amp;#39;数据容量(MB)&amp;#39;, sum(truncate(index_length / 1024 / 1024, 2)) as &amp;#39;索引容量(MB)&amp;#39; from information_schema.tables group by table_schema order by sum(data_length) desc, sum(index_length) desc; 2.查看所有数据库各表容量大小 select table_schema as &amp;#39;数据库&amp;#39;, table_name as &amp;#39;表名&amp;#39;, table_rows as &amp;#39;记录数&amp;#39;, truncate(data_length / 1024 / 1024, 2) as &amp;#39;数据容量(MB)&amp;#39;, truncate(index_length / 1024 / 1024, 2) as &amp;#39;索引容量(MB)&amp;#39; from information_schema.tables order by data_length desc, index_length desc; 3.</description></item><item><title>线上java程序CPU占用过高问题排查</title><link>https://linkall.pub/blog/troubleshooting-of-high-cpu-consumption-of-online-java-programs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://linkall.pub/blog/troubleshooting-of-high-cpu-consumption-of-online-java-programs/</guid><description>查看系统状况 top 命令查看CPU、内存等使用情况 [root@DEV-L002323 ~]# top top - 14:52:54 up 514 days, 7:00, 8 users, load average: 2.85, 1.35, 1.62 Tasks: 147 total, 1 running, 146 sleeping, 0 stopped, 0 zombie Cpu(s): 57.6%us, 6.3%sy, 0.0%ni, 9.2%id, 26.2%wa, 0.0%hi, 0.0%si, 0.7%st Mem: 3922928k total, 3794232k used, 128696k free, 403112k buffers Swap: 4194296k total, 65388k used, 4128908k free, 1492204k cached PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 6764 root 20 0 2428m 1.</description></item></channel></rss>